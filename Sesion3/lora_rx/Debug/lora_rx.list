
lora_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b4c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d10  08002d10  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08002d10  08002d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d18  08002d18  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d18  08002d18  00012d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000114  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 14 .debug_info   000089e9  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001810  00000000  00000000  00028a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000720  00000000  00000000  0002a290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000571  00000000  00000000  0002a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021d4b  00000000  00000000  0002af21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009319  00000000  00000000  0004cc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cdb1c  00000000  00000000  00055f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001bdc  00000000  00000000  00123aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00125680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002ce0 	.word	0x08002ce0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	08002ce0 	.word	0x08002ce0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fa90 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f828 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f8ea 	bl	80006cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 f894 	bl	8000624 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004fc:	f000 f8bc 	bl	8000678 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, dato_b, sizeof(dato_b), HAL_MAX_DELAY);
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
 8000504:	2214      	movs	r2, #20
 8000506:	490b      	ldr	r1, [pc, #44]	; (8000534 <main+0x4c>)
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <main+0x50>)
 800050a:	f001 fb92 	bl	8001c32 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(m0_GPIO_Port, m0_Pin,GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <main+0x54>)
 8000516:	f000 fe3d 	bl	8001194 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(m1_GPIO_Port, m1_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x54>)
 8000522:	f000 fe37 	bl	8001194 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1,&rx,1);
 8000526:	2201      	movs	r2, #1
 8000528:	4905      	ldr	r1, [pc, #20]	; (8000540 <main+0x58>)
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <main+0x50>)
 800052c:	f001 fc13 	bl	8001d56 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x48>
 8000532:	bf00      	nop
 8000534:	20000000 	.word	0x20000000
 8000538:	2000003c 	.word	0x2000003c
 800053c:	40020000 	.word	0x40020000
 8000540:	200000c4 	.word	0x200000c4

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fb98 	bl	8002c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <SystemClock_Config+0xd8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a2a      	ldr	r2, [pc, #168]	; (800061c <SystemClock_Config+0xd8>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <SystemClock_Config+0xd8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xdc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a24      	ldr	r2, [pc, #144]	; (8000620 <SystemClock_Config+0xdc>)
 800058e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xdc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005b8:	23b4      	movs	r3, #180	; 0xb4
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c0:	2307      	movs	r3, #7
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fe4d 	bl	8001268 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d4:	f000 f8fa 	bl	80007cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d8:	f000 fdf6 	bl	80011c8 <HAL_PWREx_EnableOverDrive>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005e2:	f000 f8f3 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2302      	movs	r3, #2
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2105      	movs	r1, #5
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f8a7 	bl	8001758 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000610:	f000 f8dc 	bl	80007cc <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART1_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800065c:	f001 fa9c 	bl	8001b98 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f8b1 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000003c 	.word	0x2000003c
 8000674:	40011000 	.word	0x40011000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fa72 	bl	8001b98 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f887 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000080 	.word	0x20000080
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_GPIO_Init+0x80>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_GPIO_Init+0x80>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_GPIO_Init+0x80>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_GPIO_Init+0x80>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a11      	ldr	r2, [pc, #68]	; (800074c <MX_GPIO_Init+0x80>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_GPIO_Init+0x80>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, m0_Pin|m1_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <MX_GPIO_Init+0x84>)
 8000722:	f000 fd37 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : m0_Pin m1_Pin */
  GPIO_InitStruct.Pin = m0_Pin|m1_Pin;
 8000726:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4619      	mov	r1, r3
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_GPIO_Init+0x84>)
 8000740:	f000 fb7c 	bl	8000e3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000

08000754 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]


	switch (rx) {
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_UART_RxCpltCallback+0x64>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b2a      	cmp	r3, #42	; 0x2a
 8000762:	d111      	bne.n	8000788 <HAL_UART_RxCpltCallback+0x34>

		case '*':
          //  bateria = atoi(buffer_rx);
			HAL_UART_Transmit(&huart1, buffer_rx, sizeof(buffer_rx), HAL_MAX_DELAY);
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2264      	movs	r2, #100	; 0x64
 800076a:	4914      	ldr	r1, [pc, #80]	; (80007bc <HAL_UART_RxCpltCallback+0x68>)
 800076c:	4814      	ldr	r0, [pc, #80]	; (80007c0 <HAL_UART_RxCpltCallback+0x6c>)
 800076e:	f001 fa60 	bl	8001c32 <HAL_UART_Transmit>
			memset(buffer_rx,0,i);
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_UART_RxCpltCallback+0x70>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	4810      	ldr	r0, [pc, #64]	; (80007bc <HAL_UART_RxCpltCallback+0x68>)
 800077c:	f002 fa84 	bl	8002c88 <memset>
			i=0;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <HAL_UART_RxCpltCallback+0x70>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
			break;
 8000786:	e00d      	b.n	80007a4 <HAL_UART_RxCpltCallback+0x50>


		default:
			buffer_rx[i] =rx;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_UART_RxCpltCallback+0x70>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_UART_RxCpltCallback+0x64>)
 8000790:	7819      	ldrb	r1, [r3, #0]
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_UART_RxCpltCallback+0x68>)
 8000794:	5499      	strb	r1, [r3, r2]
				i++;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_UART_RxCpltCallback+0x70>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_UART_RxCpltCallback+0x70>)
 80007a0:	701a      	strb	r2, [r3, #0]
			break;
 80007a2:	bf00      	nop
	}

	  HAL_UART_Receive_IT(&huart2,&rx, 1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	4904      	ldr	r1, [pc, #16]	; (80007b8 <HAL_UART_RxCpltCallback+0x64>)
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <HAL_UART_RxCpltCallback+0x74>)
 80007aa:	f001 fad4 	bl	8001d56 <HAL_UART_Receive_IT>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000c4 	.word	0x200000c4
 80007bc:	200000c8 	.word	0x200000c8
 80007c0:	2000003c 	.word	0x2000003c
 80007c4:	2000012c 	.word	0x2000012c
 80007c8:	20000080 	.word	0x20000080

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000816:	2007      	movs	r0, #7
 8000818:	f000 fa3c 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a36      	ldr	r2, [pc, #216]	; (8000920 <HAL_UART_MspInit+0xf8>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d135      	bne.n	80008b6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	4b35      	ldr	r3, [pc, #212]	; (8000924 <HAL_UART_MspInit+0xfc>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a34      	ldr	r2, [pc, #208]	; (8000924 <HAL_UART_MspInit+0xfc>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <HAL_UART_MspInit+0xfc>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <HAL_UART_MspInit+0xfc>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a2d      	ldr	r2, [pc, #180]	; (8000924 <HAL_UART_MspInit+0xfc>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <HAL_UART_MspInit+0xfc>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000882:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000894:	2307      	movs	r3, #7
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4822      	ldr	r0, [pc, #136]	; (8000928 <HAL_UART_MspInit+0x100>)
 80008a0:	f000 facc 	bl	8000e3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2025      	movs	r0, #37	; 0x25
 80008aa:	f000 f9fe 	bl	8000caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008ae:	2025      	movs	r0, #37	; 0x25
 80008b0:	f000 fa17 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b4:	e030      	b.n	8000918 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <HAL_UART_MspInit+0x104>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d12b      	bne.n	8000918 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a16      	ldr	r2, [pc, #88]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008f8:	230c      	movs	r3, #12
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000908:	2307      	movs	r3, #7
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_UART_MspInit+0x100>)
 8000914:	f000 fa92 	bl	8000e3c <HAL_GPIO_Init>
}
 8000918:	bf00      	nop
 800091a:	3730      	adds	r7, #48	; 0x30
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40011000 	.word	0x40011000
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000
 800092c:	40004400 	.word	0x40004400

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f89a 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <USART1_IRQHandler+0x10>)
 800098a:	f001 fa15 	bl	8001db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000003c 	.word	0x2000003c

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009e6:	f7ff ffd7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f002 f955 	bl	8002c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fd7b 	bl	80004e8 <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a00:	08002d20 	.word	0x08002d20
  ldr r2, =_sbss
 8000a04:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a08:	20000134 	.word	0x20000134

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f92b 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fec8 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f943 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f90b 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000014 	.word	0x20000014
 8000aac:	2000001c 	.word	0x2000001c
 8000ab0:	20000018 	.word	0x20000018

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000001c 	.word	0x2000001c
 8000ad8:	20000130 	.word	0x20000130

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000130 	.word	0x20000130

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4907      	ldr	r1, [pc, #28]	; (8000b90 <__NVIC_EnableIRQ+0x38>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff8e 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff29 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff3e 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff8e 	bl	8000be8 <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff31 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa2 	bl	8000c50 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff feda 	bl	8000adc <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d008      	beq.n	8000d48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e052      	b.n	8000dee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 0216 	bic.w	r2, r2, #22
 8000d56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d103      	bne.n	8000d78 <HAL_DMA_Abort+0x62>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d007      	beq.n	8000d88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0208 	bic.w	r2, r2, #8
 8000d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0201 	bic.w	r2, r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d98:	e013      	b.n	8000dc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d9a:	f7ff fe9f 	bl	8000adc <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d90c      	bls.n	8000dc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e015      	b.n	8000dee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1e4      	bne.n	8000d9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd4:	223f      	movs	r2, #63	; 0x3f
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d004      	beq.n	8000e14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e00c      	b.n	8000e2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2205      	movs	r2, #5
 8000e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e177      	b.n	8001148 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8166 	bne.w	8001142 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d005      	beq.n	8000e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d130      	bne.n	8000ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 0201 	and.w	r2, r3, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d017      	beq.n	8000f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80c0 	beq.w	8001142 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b66      	ldr	r3, [pc, #408]	; (8001160 <HAL_GPIO_Init+0x324>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a65      	ldr	r2, [pc, #404]	; (8001160 <HAL_GPIO_Init+0x324>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b63      	ldr	r3, [pc, #396]	; (8001160 <HAL_GPIO_Init+0x324>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a61      	ldr	r2, [pc, #388]	; (8001164 <HAL_GPIO_Init+0x328>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a58      	ldr	r2, [pc, #352]	; (8001168 <HAL_GPIO_Init+0x32c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d037      	beq.n	800107a <HAL_GPIO_Init+0x23e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a57      	ldr	r2, [pc, #348]	; (800116c <HAL_GPIO_Init+0x330>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d031      	beq.n	8001076 <HAL_GPIO_Init+0x23a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a56      	ldr	r2, [pc, #344]	; (8001170 <HAL_GPIO_Init+0x334>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d02b      	beq.n	8001072 <HAL_GPIO_Init+0x236>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a55      	ldr	r2, [pc, #340]	; (8001174 <HAL_GPIO_Init+0x338>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d025      	beq.n	800106e <HAL_GPIO_Init+0x232>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a54      	ldr	r2, [pc, #336]	; (8001178 <HAL_GPIO_Init+0x33c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d01f      	beq.n	800106a <HAL_GPIO_Init+0x22e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a53      	ldr	r2, [pc, #332]	; (800117c <HAL_GPIO_Init+0x340>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d019      	beq.n	8001066 <HAL_GPIO_Init+0x22a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x344>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0x226>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x348>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d00d      	beq.n	800105e <HAL_GPIO_Init+0x222>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x34c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d007      	beq.n	800105a <HAL_GPIO_Init+0x21e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x350>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_GPIO_Init+0x21a>
 8001052:	2309      	movs	r3, #9
 8001054:	e012      	b.n	800107c <HAL_GPIO_Init+0x240>
 8001056:	230a      	movs	r3, #10
 8001058:	e010      	b.n	800107c <HAL_GPIO_Init+0x240>
 800105a:	2308      	movs	r3, #8
 800105c:	e00e      	b.n	800107c <HAL_GPIO_Init+0x240>
 800105e:	2307      	movs	r3, #7
 8001060:	e00c      	b.n	800107c <HAL_GPIO_Init+0x240>
 8001062:	2306      	movs	r3, #6
 8001064:	e00a      	b.n	800107c <HAL_GPIO_Init+0x240>
 8001066:	2305      	movs	r3, #5
 8001068:	e008      	b.n	800107c <HAL_GPIO_Init+0x240>
 800106a:	2304      	movs	r3, #4
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x240>
 800106e:	2303      	movs	r3, #3
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x240>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x240>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x240>
 800107a:	2300      	movs	r3, #0
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108c:	4935      	ldr	r1, [pc, #212]	; (8001164 <HAL_GPIO_Init+0x328>)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <HAL_GPIO_Init+0x354>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010be:	4a34      	ldr	r2, [pc, #208]	; (8001190 <HAL_GPIO_Init+0x354>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_GPIO_Init+0x354>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e8:	4a29      	ldr	r2, [pc, #164]	; (8001190 <HAL_GPIO_Init+0x354>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <HAL_GPIO_Init+0x354>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_GPIO_Init+0x354>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_GPIO_Init+0x354>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <HAL_GPIO_Init+0x354>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3301      	adds	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b0f      	cmp	r3, #15
 800114c:	f67f ae84 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40013800 	.word	0x40013800
 8001168:	40020000 	.word	0x40020000
 800116c:	40020400 	.word	0x40020400
 8001170:	40020800 	.word	0x40020800
 8001174:	40020c00 	.word	0x40020c00
 8001178:	40021000 	.word	0x40021000
 800117c:	40021400 	.word	0x40021400
 8001180:	40021800 	.word	0x40021800
 8001184:	40021c00 	.word	0x40021c00
 8001188:	40022000 	.word	0x40022000
 800118c:	40022400 	.word	0x40022400
 8001190:	40013c00 	.word	0x40013c00

08001194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b0:	e003      	b.n	80011ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_PWREx_EnableOverDrive+0x90>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_PWREx_EnableOverDrive+0x90>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_PWREx_EnableOverDrive+0x90>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_PWREx_EnableOverDrive+0x94>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f4:	f7ff fc72 	bl	8000adc <HAL_GetTick>
 80011f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011fa:	e009      	b.n	8001210 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011fc:	f7ff fc6e 	bl	8000adc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800120a:	d901      	bls.n	8001210 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e01f      	b.n	8001250 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_PWREx_EnableOverDrive+0x98>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121c:	d1ee      	bne.n	80011fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001224:	f7ff fc5a 	bl	8000adc <HAL_GetTick>
 8001228:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800122a:	e009      	b.n	8001240 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800122c:	f7ff fc56 	bl	8000adc <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800123a:	d901      	bls.n	8001240 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e007      	b.n	8001250 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <HAL_PWREx_EnableOverDrive+0x98>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800124c:	d1ee      	bne.n	800122c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	420e0040 	.word	0x420e0040
 8001260:	40007000 	.word	0x40007000
 8001264:	420e0044 	.word	0x420e0044

08001268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e267      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d075      	beq.n	8001372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001286:	4b88      	ldr	r3, [pc, #544]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b04      	cmp	r3, #4
 8001290:	d00c      	beq.n	80012ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001292:	4b85      	ldr	r3, [pc, #532]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129a:	2b08      	cmp	r3, #8
 800129c:	d112      	bne.n	80012c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129e:	4b82      	ldr	r3, [pc, #520]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012aa:	d10b      	bne.n	80012c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	4b7e      	ldr	r3, [pc, #504]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d05b      	beq.n	8001370 <HAL_RCC_OscConfig+0x108>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d157      	bne.n	8001370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e242      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012cc:	d106      	bne.n	80012dc <HAL_RCC_OscConfig+0x74>
 80012ce:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a75      	ldr	r2, [pc, #468]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e01d      	b.n	8001318 <HAL_RCC_OscConfig+0xb0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0x98>
 80012e6:	4b70      	ldr	r3, [pc, #448]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a6f      	ldr	r2, [pc, #444]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b6d      	ldr	r3, [pc, #436]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6c      	ldr	r2, [pc, #432]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e00b      	b.n	8001318 <HAL_RCC_OscConfig+0xb0>
 8001300:	4b69      	ldr	r3, [pc, #420]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a68      	ldr	r2, [pc, #416]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a65      	ldr	r2, [pc, #404]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fbdc 	bl	8000adc <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fbd8 	bl	8000adc <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e207      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b5b      	ldr	r3, [pc, #364]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0xc0>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fbc8 	bl	8000adc <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fbc4 	bl	8000adc <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1f3      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0xe8>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d063      	beq.n	8001446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137e:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001392:	2b08      	cmp	r3, #8
 8001394:	d11c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001396:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d116      	bne.n	80013d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	4b41      	ldr	r3, [pc, #260]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <HAL_RCC_OscConfig+0x152>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e1c7      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4937      	ldr	r1, [pc, #220]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	e03a      	b.n	8001446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d8:	4b34      	ldr	r3, [pc, #208]	; (80014ac <HAL_RCC_OscConfig+0x244>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013de:	f7ff fb7d 	bl	8000adc <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff fb79 	bl	8000adc <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e1a8      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4925      	ldr	r1, [pc, #148]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
 8001418:	e015      	b.n	8001446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_RCC_OscConfig+0x244>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fb5c 	bl	8000adc <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001428:	f7ff fb58 	bl	8000adc <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e187      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d036      	beq.n	80014c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d016      	beq.n	8001488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_RCC_OscConfig+0x248>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001460:	f7ff fb3c 	bl	8000adc <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff fb38 	bl	8000adc <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e167      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_RCC_OscConfig+0x240>)
 800147c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x200>
 8001486:	e01b      	b.n	80014c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_RCC_OscConfig+0x248>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff fb25 	bl	8000adc <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001494:	e00e      	b.n	80014b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001496:	f7ff fb21 	bl	8000adc <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d907      	bls.n	80014b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e150      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
 80014a8:	40023800 	.word	0x40023800
 80014ac:	42470000 	.word	0x42470000
 80014b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1ea      	bne.n	8001496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 8097 	beq.w	80015fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d2:	4b81      	ldr	r3, [pc, #516]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b7d      	ldr	r3, [pc, #500]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a7c      	ldr	r2, [pc, #496]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b7a      	ldr	r3, [pc, #488]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fa:	2301      	movs	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b77      	ldr	r3, [pc, #476]	; (80016dc <HAL_RCC_OscConfig+0x474>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d118      	bne.n	800153c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150a:	4b74      	ldr	r3, [pc, #464]	; (80016dc <HAL_RCC_OscConfig+0x474>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a73      	ldr	r2, [pc, #460]	; (80016dc <HAL_RCC_OscConfig+0x474>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001516:	f7ff fae1 	bl	8000adc <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151e:	f7ff fadd 	bl	8000adc <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e10c      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <HAL_RCC_OscConfig+0x474>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x2ea>
 8001544:	4b64      	ldr	r3, [pc, #400]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a63      	ldr	r2, [pc, #396]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	e01c      	b.n	800158c <HAL_RCC_OscConfig+0x324>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b05      	cmp	r3, #5
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x30c>
 800155a:	4b5f      	ldr	r3, [pc, #380]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	4a5e      	ldr	r2, [pc, #376]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6713      	str	r3, [r2, #112]	; 0x70
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	4a5b      	ldr	r2, [pc, #364]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6713      	str	r3, [r2, #112]	; 0x70
 8001572:	e00b      	b.n	800158c <HAL_RCC_OscConfig+0x324>
 8001574:	4b58      	ldr	r3, [pc, #352]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	4a57      	ldr	r2, [pc, #348]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	6713      	str	r3, [r2, #112]	; 0x70
 8001580:	4b55      	ldr	r3, [pc, #340]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a54      	ldr	r2, [pc, #336]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001586:	f023 0304 	bic.w	r3, r3, #4
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d015      	beq.n	80015c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff faa2 	bl	8000adc <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff fa9e 	bl	8000adc <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0cb      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b2:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0ee      	beq.n	800159c <HAL_RCC_OscConfig+0x334>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff fa8c 	bl	8000adc <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c6:	e00a      	b.n	80015de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c8:	f7ff fa88 	bl	8000adc <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e0b5      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015de:	4b3e      	ldr	r3, [pc, #248]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ee      	bne.n	80015c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f0:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 80015f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80a1 	beq.w	8001748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b08      	cmp	r3, #8
 8001610:	d05c      	beq.n	80016cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d141      	bne.n	800169e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <HAL_RCC_OscConfig+0x478>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fa5c 	bl	8000adc <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff fa58 	bl	8000adc <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e087      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69da      	ldr	r2, [r3, #28]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	019b      	lsls	r3, r3, #6
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	085b      	lsrs	r3, r3, #1
 800165e:	3b01      	subs	r3, #1
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	061b      	lsls	r3, r3, #24
 800166a:	491b      	ldr	r1, [pc, #108]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x478>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fa31 	bl	8000adc <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fa2d 	bl	8000adc <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e05c      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x416>
 800169c:	e054      	b.n	8001748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_RCC_OscConfig+0x478>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fa1a 	bl	8000adc <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff fa16 	bl	8000adc <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e045      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_RCC_OscConfig+0x470>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x444>
 80016ca:	e03d      	b.n	8001748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e038      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000
 80016e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_RCC_OscConfig+0x4ec>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d028      	beq.n	8001744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d121      	bne.n	8001744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d11a      	bne.n	8001744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001714:	4013      	ands	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800171a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171c:	4293      	cmp	r3, r2
 800171e:	d111      	bne.n	8001744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	3b01      	subs	r3, #1
 800172e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001730:	429a      	cmp	r2, r3
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0cc      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800176c:	4b68      	ldr	r3, [pc, #416]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d90c      	bls.n	8001794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b65      	ldr	r3, [pc, #404]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0b8      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ac:	4b59      	ldr	r3, [pc, #356]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a58      	ldr	r2, [pc, #352]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a52      	ldr	r2, [pc, #328]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	494d      	ldr	r1, [pc, #308]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d044      	beq.n	8001878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d119      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e07f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d003      	beq.n	8001816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	2b03      	cmp	r3, #3
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001816:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001826:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e067      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001836:	4b37      	ldr	r3, [pc, #220]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f023 0203 	bic.w	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4934      	ldr	r1, [pc, #208]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001848:	f7ff f948 	bl	8000adc <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	e00a      	b.n	8001866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001850:	f7ff f944 	bl	8000adc <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e04f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 020c 	and.w	r2, r3, #12
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	429a      	cmp	r2, r3
 8001876:	d1eb      	bne.n	8001850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d20c      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e032      	b.n	8001906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4916      	ldr	r1, [pc, #88]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	490e      	ldr	r1, [pc, #56]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018de:	f000 f821 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80018e2:	4602      	mov	r2, r0
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	490a      	ldr	r1, [pc, #40]	; (8001918 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	5ccb      	ldrb	r3, [r1, r3]
 80018f2:	fa22 f303 	lsr.w	r3, r2, r3
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f8a8 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00
 8001914:	40023800 	.word	0x40023800
 8001918:	08002cf8 	.word	0x08002cf8
 800191c:	20000014 	.word	0x20000014
 8001920:	20000018 	.word	0x20000018

08001924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001928:	b094      	sub	sp, #80	; 0x50
 800192a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	647b      	str	r3, [r7, #68]	; 0x44
 8001930:	2300      	movs	r3, #0
 8001932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001934:	2300      	movs	r3, #0
 8001936:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193c:	4b79      	ldr	r3, [pc, #484]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d00d      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x40>
 8001948:	2b08      	cmp	r3, #8
 800194a:	f200 80e1 	bhi.w	8001b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x34>
 8001952:	2b04      	cmp	r3, #4
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x3a>
 8001956:	e0db      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800195a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800195c:	e0db      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800195e:	4b73      	ldr	r3, [pc, #460]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x208>)
 8001960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001962:	e0d8      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001964:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800196c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196e:	4b6d      	ldr	r3, [pc, #436]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d063      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197a:	4b6a      	ldr	r3, [pc, #424]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	2200      	movs	r2, #0
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
 8001984:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
 8001992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001996:	4622      	mov	r2, r4
 8001998:	462b      	mov	r3, r5
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	0159      	lsls	r1, r3, #5
 80019a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a8:	0150      	lsls	r0, r2, #5
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4621      	mov	r1, r4
 80019b0:	1a51      	subs	r1, r2, r1
 80019b2:	6139      	str	r1, [r7, #16]
 80019b4:	4629      	mov	r1, r5
 80019b6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019c8:	4659      	mov	r1, fp
 80019ca:	018b      	lsls	r3, r1, #6
 80019cc:	4651      	mov	r1, sl
 80019ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019d2:	4651      	mov	r1, sl
 80019d4:	018a      	lsls	r2, r1, #6
 80019d6:	4651      	mov	r1, sl
 80019d8:	ebb2 0801 	subs.w	r8, r2, r1
 80019dc:	4659      	mov	r1, fp
 80019de:	eb63 0901 	sbc.w	r9, r3, r1
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019f6:	4690      	mov	r8, r2
 80019f8:	4699      	mov	r9, r3
 80019fa:	4623      	mov	r3, r4
 80019fc:	eb18 0303 	adds.w	r3, r8, r3
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	462b      	mov	r3, r5
 8001a04:	eb49 0303 	adc.w	r3, r9, r3
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a16:	4629      	mov	r1, r5
 8001a18:	024b      	lsls	r3, r1, #9
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a20:	4621      	mov	r1, r4
 8001a22:	024a      	lsls	r2, r1, #9
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a34:	f7fe fbda 	bl	80001ec <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a40:	e058      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	099b      	lsrs	r3, r3, #6
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a52:	623b      	str	r3, [r7, #32]
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
 8001a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	464b      	mov	r3, r9
 8001a60:	f04f 0000 	mov.w	r0, #0
 8001a64:	f04f 0100 	mov.w	r1, #0
 8001a68:	0159      	lsls	r1, r3, #5
 8001a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a6e:	0150      	lsls	r0, r2, #5
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4641      	mov	r1, r8
 8001a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a7a:	4649      	mov	r1, r9
 8001a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a94:	ebb2 040a 	subs.w	r4, r2, sl
 8001a98:	eb63 050b 	sbc.w	r5, r3, fp
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	00eb      	lsls	r3, r5, #3
 8001aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aaa:	00e2      	lsls	r2, r4, #3
 8001aac:	4614      	mov	r4, r2
 8001aae:	461d      	mov	r5, r3
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	18e3      	adds	r3, r4, r3
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	eb45 0303 	adc.w	r3, r5, r3
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aca:	4629      	mov	r1, r5
 8001acc:	028b      	lsls	r3, r1, #10
 8001ace:	4621      	mov	r1, r4
 8001ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	028a      	lsls	r2, r1, #10
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	61fa      	str	r2, [r7, #28]
 8001ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae8:	f7fe fb80 	bl	80001ec <__aeabi_uldivmod>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4613      	mov	r3, r2
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	3301      	adds	r3, #1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b0e:	e002      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3750      	adds	r7, #80	; 0x50
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	007a1200 	.word	0x007a1200

08001b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000014 	.word	0x20000014

08001b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0a9b      	lsrs	r3, r3, #10
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08002d08 	.word	0x08002d08

08001b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b74:	f7ff ffdc 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0b5b      	lsrs	r3, r3, #13
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	08002d08 	.word	0x08002d08

08001b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e03f      	b.n	8001c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fe32 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2224      	movs	r2, #36	; 0x24
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fddf 	bl	80027a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b08a      	sub	sp, #40	; 0x28
 8001c36:	af02      	add	r7, sp, #8
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d17c      	bne.n	8001d4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_UART_Transmit+0x2c>
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e075      	b.n	8001d4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_UART_Transmit+0x3e>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e06e      	b.n	8001d4e <HAL_UART_Transmit+0x11c>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2221      	movs	r2, #33	; 0x21
 8001c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c86:	f7fe ff29 	bl	8000adc <HAL_GetTick>
 8001c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	88fa      	ldrh	r2, [r7, #6]
 8001c96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca0:	d108      	bne.n	8001cb4 <HAL_UART_Transmit+0x82>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d104      	bne.n	8001cb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	e003      	b.n	8001cbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001cc4:	e02a      	b.n	8001d1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 fb1f 	bl	8002314 <UART_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e036      	b.n	8001d4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10b      	bne.n	8001cfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	e007      	b.n	8001d0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1cf      	bne.n	8001cc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2140      	movs	r1, #64	; 0x40
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 faef 	bl	8002314 <UART_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e006      	b.n	8001d4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e000      	b.n	8001d4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d4c:	2302      	movs	r3, #2
  }
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	4613      	mov	r3, r2
 8001d62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	d11d      	bne.n	8001dac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_UART_Receive_IT+0x26>
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e016      	b.n	8001dae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_UART_Receive_IT+0x38>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e00f      	b.n	8001dae <HAL_UART_Receive_IT+0x58>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 fb24 	bl	80023f0 <UART_Start_Receive_IT>
 8001da8:	4603      	mov	r3, r0
 8001daa:	e000      	b.n	8001dae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
  }
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0ba      	sub	sp, #232	; 0xe8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <HAL_UART_IRQHandler+0x66>
 8001e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fc07 	bl	800262a <UART_Receive_IT>
      return;
 8001e1c:	e256      	b.n	80022cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80de 	beq.w	8001fe4 <HAL_UART_IRQHandler+0x22c>
 8001e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80d1 	beq.w	8001fe4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_UART_IRQHandler+0xae>
 8001e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_UART_IRQHandler+0xd2>
 8001e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d005      	beq.n	8001e8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f043 0202 	orr.w	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_UART_IRQHandler+0xf6>
 8001e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f043 0204 	orr.w	r2, r3, #4
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d011      	beq.n	8001ede <HAL_UART_IRQHandler+0x126>
 8001eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f043 0208 	orr.w	r2, r3, #8
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 81ed 	beq.w	80022c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_UART_IRQHandler+0x14e>
 8001ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fb92 	bl	800262a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <HAL_UART_IRQHandler+0x17a>
 8001f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d04f      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fa9a 	bl	800246c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d141      	bne.n	8001fca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3314      	adds	r3, #20
 8001f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f54:	e853 3f00 	ldrex	r3, [r3]
 8001f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3314      	adds	r3, #20
 8001f6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f82:	e841 2300 	strex	r3, r2, [r1]
 8001f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1d9      	bne.n	8001f46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d013      	beq.n	8001fc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	4a7d      	ldr	r2, [pc, #500]	; (8002194 <HAL_UART_IRQHandler+0x3dc>)
 8001fa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe ff25 	bl	8000df6 <HAL_DMA_Abort_IT>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d016      	beq.n	8001fe0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc0:	e00e      	b.n	8001fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f990 	bl	80022e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc8:	e00a      	b.n	8001fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f98c 	bl	80022e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd0:	e006      	b.n	8001fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f988 	bl	80022e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001fde:	e170      	b.n	80022c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe0:	bf00      	nop
    return;
 8001fe2:	e16e      	b.n	80022c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	f040 814a 	bne.w	8002282 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8143 	beq.w	8002282 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 813c 	beq.w	8002282 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	f040 80b4 	bne.w	8002198 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800203c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8140 	beq.w	80022c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800204a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800204e:	429a      	cmp	r2, r3
 8002050:	f080 8139 	bcs.w	80022c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800205a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002066:	f000 8088 	beq.w	800217a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	330c      	adds	r3, #12
 8002070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002074:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002078:	e853 3f00 	ldrex	r3, [r3]
 800207c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	330c      	adds	r3, #12
 8002092:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002096:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800209a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80020a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020a6:	e841 2300 	strex	r3, r2, [r1]
 80020aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80020ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1d9      	bne.n	800206a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3314      	adds	r3, #20
 80020bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c0:	e853 3f00 	ldrex	r3, [r3]
 80020c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80020c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3314      	adds	r3, #20
 80020d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80020de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80020e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80020e6:	e841 2300 	strex	r3, r2, [r1]
 80020ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80020ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1e1      	bne.n	80020b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3314      	adds	r3, #20
 80020f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020fc:	e853 3f00 	ldrex	r3, [r3]
 8002100:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	3314      	adds	r3, #20
 8002112:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002116:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002118:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800211c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800211e:	e841 2300 	strex	r3, r2, [r1]
 8002122:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1e3      	bne.n	80020f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	330c      	adds	r3, #12
 800213e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002142:	e853 3f00 	ldrex	r3, [r3]
 8002146:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214a:	f023 0310 	bic.w	r3, r3, #16
 800214e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	330c      	adds	r3, #12
 8002158:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800215c:	65ba      	str	r2, [r7, #88]	; 0x58
 800215e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002160:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002162:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002164:	e841 2300 	strex	r3, r2, [r1]
 8002168:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800216a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e3      	bne.n	8002138 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fdce 	bl	8000d16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002182:	b29b      	uxth	r3, r3
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	b29b      	uxth	r3, r3
 8002188:	4619      	mov	r1, r3
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8b6 	bl	80022fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002190:	e099      	b.n	80022c6 <HAL_UART_IRQHandler+0x50e>
 8002192:	bf00      	nop
 8002194:	08002533 	.word	0x08002533
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 808b 	beq.w	80022ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80021b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8086 	beq.w	80022ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	330c      	adds	r3, #12
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	e853 3f00 	ldrex	r3, [r3]
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80021ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	330c      	adds	r3, #12
 80021de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80021e2:	647a      	str	r2, [r7, #68]	; 0x44
 80021e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021ea:	e841 2300 	strex	r3, r2, [r1]
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80021f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1e3      	bne.n	80021be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3314      	adds	r3, #20
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	e853 3f00 	ldrex	r3, [r3]
 8002204:	623b      	str	r3, [r7, #32]
   return(result);
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3314      	adds	r3, #20
 8002216:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800221a:	633a      	str	r2, [r7, #48]	; 0x30
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800221e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002222:	e841 2300 	strex	r3, r2, [r1]
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e3      	bne.n	80021f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	330c      	adds	r3, #12
 8002242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	e853 3f00 	ldrex	r3, [r3]
 800224a:	60fb      	str	r3, [r7, #12]
   return(result);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0310 	bic.w	r3, r3, #16
 8002252:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	330c      	adds	r3, #12
 800225c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002260:	61fa      	str	r2, [r7, #28]
 8002262:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002264:	69b9      	ldr	r1, [r7, #24]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	e841 2300 	strex	r3, r2, [r1]
 800226c:	617b      	str	r3, [r7, #20]
   return(result);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e3      	bne.n	800223c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f83e 	bl	80022fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002280:	e023      	b.n	80022ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_UART_IRQHandler+0x4ea>
 800228e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f95d 	bl	800255a <UART_Transmit_IT>
    return;
 80022a0:	e014      	b.n	80022cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00e      	beq.n	80022cc <HAL_UART_IRQHandler+0x514>
 80022ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f99d 	bl	80025fa <UART_EndTransmit_IT>
    return;
 80022c0:	e004      	b.n	80022cc <HAL_UART_IRQHandler+0x514>
    return;
 80022c2:	bf00      	nop
 80022c4:	e002      	b.n	80022cc <HAL_UART_IRQHandler+0x514>
      return;
 80022c6:	bf00      	nop
 80022c8:	e000      	b.n	80022cc <HAL_UART_IRQHandler+0x514>
      return;
 80022ca:	bf00      	nop
  }
}
 80022cc:	37e8      	adds	r7, #232	; 0xe8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop

080022d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b090      	sub	sp, #64	; 0x40
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002324:	e050      	b.n	80023c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d04c      	beq.n	80023c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <UART_WaitOnFlagUntilTimeout+0x30>
 8002334:	f7fe fbd2 	bl	8000adc <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002340:	429a      	cmp	r2, r3
 8002342:	d241      	bcs.n	80023c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	330c      	adds	r3, #12
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234e:	e853 3f00 	ldrex	r3, [r3]
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	330c      	adds	r3, #12
 8002362:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002364:	637a      	str	r2, [r7, #52]	; 0x34
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800236a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800236c:	e841 2300 	strex	r3, r2, [r1]
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e5      	bne.n	8002344 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3314      	adds	r3, #20
 800237e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	e853 3f00 	ldrex	r3, [r3]
 8002386:	613b      	str	r3, [r7, #16]
   return(result);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3314      	adds	r3, #20
 8002396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002398:	623a      	str	r2, [r7, #32]
 800239a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239c:	69f9      	ldr	r1, [r7, #28]
 800239e:	6a3a      	ldr	r2, [r7, #32]
 80023a0:	e841 2300 	strex	r3, r2, [r1]
 80023a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e5      	bne.n	8002378 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e00f      	b.n	80023e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4013      	ands	r3, r2
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d09f      	beq.n	8002326 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3740      	adds	r7, #64	; 0x40
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	88fa      	ldrh	r2, [r7, #6]
 800240e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2222      	movs	r2, #34	; 0x22
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0201 	orr.w	r2, r2, #1
 800244c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0220 	orr.w	r2, r2, #32
 800245c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800246c:	b480      	push	{r7}
 800246e:	b095      	sub	sp, #84	; 0x54
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330c      	adds	r3, #12
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247e:	e853 3f00 	ldrex	r3, [r3]
 8002482:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	330c      	adds	r3, #12
 8002492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002494:	643a      	str	r2, [r7, #64]	; 0x40
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800249a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800249c:	e841 2300 	strex	r3, r2, [r1]
 80024a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e5      	bne.n	8002474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3314      	adds	r3, #20
 80024ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	e853 3f00 	ldrex	r3, [r3]
 80024b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	64bb      	str	r3, [r7, #72]	; 0x48
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3314      	adds	r3, #20
 80024c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d0:	e841 2300 	strex	r3, r2, [r1]
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e5      	bne.n	80024a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d119      	bne.n	8002518 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	330c      	adds	r3, #12
 80024ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	e853 3f00 	ldrex	r3, [r3]
 80024f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f023 0310 	bic.w	r3, r3, #16
 80024fa:	647b      	str	r3, [r7, #68]	; 0x44
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	330c      	adds	r3, #12
 8002502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002504:	61ba      	str	r2, [r7, #24]
 8002506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002508:	6979      	ldr	r1, [r7, #20]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	e841 2300 	strex	r3, r2, [r1]
 8002510:	613b      	str	r3, [r7, #16]
   return(result);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1e5      	bne.n	80024e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002526:	bf00      	nop
 8002528:	3754      	adds	r7, #84	; 0x54
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff fecb 	bl	80022e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b21      	cmp	r3, #33	; 0x21
 800256c:	d13e      	bne.n	80025ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002576:	d114      	bne.n	80025a2 <UART_Transmit_IT+0x48>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d110      	bne.n	80025a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002594:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	1c9a      	adds	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	621a      	str	r2, [r3, #32]
 80025a0:	e008      	b.n	80025b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	1c59      	adds	r1, r3, #1
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6211      	str	r1, [r2, #32]
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29b      	uxth	r3, r3
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4619      	mov	r1, r3
 80025c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10f      	bne.n	80025e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002610:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fe5a 	bl	80022d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b08c      	sub	sp, #48	; 0x30
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b22      	cmp	r3, #34	; 0x22
 800263c:	f040 80ab 	bne.w	8002796 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002648:	d117      	bne.n	800267a <UART_Receive_IT+0x50>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d113      	bne.n	800267a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002652:	2300      	movs	r3, #0
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002668:	b29a      	uxth	r2, r3
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	1c9a      	adds	r2, r3, #2
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
 8002678:	e026      	b.n	80026c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268c:	d007      	beq.n	800269e <UART_Receive_IT+0x74>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <UART_Receive_IT+0x82>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e008      	b.n	80026be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4619      	mov	r1, r3
 80026d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d15a      	bne.n	8002792 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0220 	bic.w	r2, r2, #32
 80026ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	2b01      	cmp	r3, #1
 800271a:	d135      	bne.n	8002788 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	330c      	adds	r3, #12
 8002728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	e853 3f00 	ldrex	r3, [r3]
 8002730:	613b      	str	r3, [r7, #16]
   return(result);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f023 0310 	bic.w	r3, r3, #16
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002742:	623a      	str	r2, [r7, #32]
 8002744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002746:	69f9      	ldr	r1, [r7, #28]
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e5      	bne.n	8002722 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b10      	cmp	r3, #16
 8002762:	d10a      	bne.n	800277a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800277e:	4619      	mov	r1, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff fdbb 	bl	80022fc <HAL_UARTEx_RxEventCallback>
 8002786:	e002      	b.n	800278e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7fd ffe3 	bl	8000754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e002      	b.n	8002798 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3730      	adds	r7, #48	; 0x30
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a4:	b0c0      	sub	sp, #256	; 0x100
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	ea40 0301 	orr.w	r3, r0, r1
 80027c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	431a      	orrs	r2, r3
 80027e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027f8:	f021 010c 	bic.w	r1, r1, #12
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002806:	430b      	orrs	r3, r1
 8002808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281a:	6999      	ldr	r1, [r3, #24]
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	ea40 0301 	orr.w	r3, r0, r1
 8002826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b8f      	ldr	r3, [pc, #572]	; (8002a6c <UART_SetConfig+0x2cc>)
 8002830:	429a      	cmp	r2, r3
 8002832:	d005      	beq.n	8002840 <UART_SetConfig+0xa0>
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b8d      	ldr	r3, [pc, #564]	; (8002a70 <UART_SetConfig+0x2d0>)
 800283c:	429a      	cmp	r2, r3
 800283e:	d104      	bne.n	800284a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002840:	f7ff f996 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 8002844:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002848:	e003      	b.n	8002852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800284a:	f7ff f97d 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 800284e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800285c:	f040 810c 	bne.w	8002a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002864:	2200      	movs	r2, #0
 8002866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800286a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800286e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002872:	4622      	mov	r2, r4
 8002874:	462b      	mov	r3, r5
 8002876:	1891      	adds	r1, r2, r2
 8002878:	65b9      	str	r1, [r7, #88]	; 0x58
 800287a:	415b      	adcs	r3, r3
 800287c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800287e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002882:	4621      	mov	r1, r4
 8002884:	eb12 0801 	adds.w	r8, r2, r1
 8002888:	4629      	mov	r1, r5
 800288a:	eb43 0901 	adc.w	r9, r3, r1
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800289a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800289e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028a2:	4690      	mov	r8, r2
 80028a4:	4699      	mov	r9, r3
 80028a6:	4623      	mov	r3, r4
 80028a8:	eb18 0303 	adds.w	r3, r8, r3
 80028ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028b0:	462b      	mov	r3, r5
 80028b2:	eb49 0303 	adc.w	r3, r9, r3
 80028b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028ce:	460b      	mov	r3, r1
 80028d0:	18db      	adds	r3, r3, r3
 80028d2:	653b      	str	r3, [r7, #80]	; 0x50
 80028d4:	4613      	mov	r3, r2
 80028d6:	eb42 0303 	adc.w	r3, r2, r3
 80028da:	657b      	str	r3, [r7, #84]	; 0x54
 80028dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028e4:	f7fd fc82 	bl	80001ec <__aeabi_uldivmod>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <UART_SetConfig+0x2d4>)
 80028ee:	fba3 2302 	umull	r2, r3, r3, r2
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	011c      	lsls	r4, r3, #4
 80028f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002900:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002908:	4642      	mov	r2, r8
 800290a:	464b      	mov	r3, r9
 800290c:	1891      	adds	r1, r2, r2
 800290e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002910:	415b      	adcs	r3, r3
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002918:	4641      	mov	r1, r8
 800291a:	eb12 0a01 	adds.w	sl, r2, r1
 800291e:	4649      	mov	r1, r9
 8002920:	eb43 0b01 	adc.w	fp, r3, r1
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002938:	4692      	mov	sl, r2
 800293a:	469b      	mov	fp, r3
 800293c:	4643      	mov	r3, r8
 800293e:	eb1a 0303 	adds.w	r3, sl, r3
 8002942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002946:	464b      	mov	r3, r9
 8002948:	eb4b 0303 	adc.w	r3, fp, r3
 800294c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800295c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002964:	460b      	mov	r3, r1
 8002966:	18db      	adds	r3, r3, r3
 8002968:	643b      	str	r3, [r7, #64]	; 0x40
 800296a:	4613      	mov	r3, r2
 800296c:	eb42 0303 	adc.w	r3, r2, r3
 8002970:	647b      	str	r3, [r7, #68]	; 0x44
 8002972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800297a:	f7fd fc37 	bl	80001ec <__aeabi_uldivmod>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4611      	mov	r1, r2
 8002984:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <UART_SetConfig+0x2d4>)
 8002986:	fba3 2301 	umull	r2, r3, r3, r1
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2264      	movs	r2, #100	; 0x64
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	1acb      	subs	r3, r1, r3
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800299a:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <UART_SetConfig+0x2d4>)
 800299c:	fba3 2302 	umull	r2, r3, r3, r2
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029a8:	441c      	add	r4, r3
 80029aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ae:	2200      	movs	r2, #0
 80029b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029bc:	4642      	mov	r2, r8
 80029be:	464b      	mov	r3, r9
 80029c0:	1891      	adds	r1, r2, r2
 80029c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80029c4:	415b      	adcs	r3, r3
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029cc:	4641      	mov	r1, r8
 80029ce:	1851      	adds	r1, r2, r1
 80029d0:	6339      	str	r1, [r7, #48]	; 0x30
 80029d2:	4649      	mov	r1, r9
 80029d4:	414b      	adcs	r3, r1
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029e4:	4659      	mov	r1, fp
 80029e6:	00cb      	lsls	r3, r1, #3
 80029e8:	4651      	mov	r1, sl
 80029ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ee:	4651      	mov	r1, sl
 80029f0:	00ca      	lsls	r2, r1, #3
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	4642      	mov	r2, r8
 80029fa:	189b      	adds	r3, r3, r2
 80029fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a00:	464b      	mov	r3, r9
 8002a02:	460a      	mov	r2, r1
 8002a04:	eb42 0303 	adc.w	r3, r2, r3
 8002a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a20:	460b      	mov	r3, r1
 8002a22:	18db      	adds	r3, r3, r3
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a26:	4613      	mov	r3, r2
 8002a28:	eb42 0303 	adc.w	r3, r2, r3
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a36:	f7fd fbd9 	bl	80001ec <__aeabi_uldivmod>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <UART_SetConfig+0x2d4>)
 8002a40:	fba3 1302 	umull	r1, r3, r3, r2
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	2164      	movs	r1, #100	; 0x64
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	3332      	adds	r3, #50	; 0x32
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <UART_SetConfig+0x2d4>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	f003 0207 	and.w	r2, r3, #7
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4422      	add	r2, r4
 8002a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a68:	e106      	b.n	8002c78 <UART_SetConfig+0x4d8>
 8002a6a:	bf00      	nop
 8002a6c:	40011000 	.word	0x40011000
 8002a70:	40011400 	.word	0x40011400
 8002a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a8a:	4642      	mov	r2, r8
 8002a8c:	464b      	mov	r3, r9
 8002a8e:	1891      	adds	r1, r2, r2
 8002a90:	6239      	str	r1, [r7, #32]
 8002a92:	415b      	adcs	r3, r3
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
 8002a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	1854      	adds	r4, r2, r1
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	eb43 0501 	adc.w	r5, r3, r1
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	00eb      	lsls	r3, r5, #3
 8002aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ab2:	00e2      	lsls	r2, r4, #3
 8002ab4:	4614      	mov	r4, r2
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	4643      	mov	r3, r8
 8002aba:	18e3      	adds	r3, r4, r3
 8002abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ac0:	464b      	mov	r3, r9
 8002ac2:	eb45 0303 	adc.w	r3, r5, r3
 8002ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	008b      	lsls	r3, r1, #2
 8002aea:	4621      	mov	r1, r4
 8002aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002af0:	4621      	mov	r1, r4
 8002af2:	008a      	lsls	r2, r1, #2
 8002af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002af8:	f7fd fb78 	bl	80001ec <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4b60      	ldr	r3, [pc, #384]	; (8002c84 <UART_SetConfig+0x4e4>)
 8002b02:	fba3 2302 	umull	r2, r3, r3, r2
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	011c      	lsls	r4, r3, #4
 8002b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b1c:	4642      	mov	r2, r8
 8002b1e:	464b      	mov	r3, r9
 8002b20:	1891      	adds	r1, r2, r2
 8002b22:	61b9      	str	r1, [r7, #24]
 8002b24:	415b      	adcs	r3, r3
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b2c:	4641      	mov	r1, r8
 8002b2e:	1851      	adds	r1, r2, r1
 8002b30:	6139      	str	r1, [r7, #16]
 8002b32:	4649      	mov	r1, r9
 8002b34:	414b      	adcs	r3, r1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b44:	4659      	mov	r1, fp
 8002b46:	00cb      	lsls	r3, r1, #3
 8002b48:	4651      	mov	r1, sl
 8002b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b4e:	4651      	mov	r1, sl
 8002b50:	00ca      	lsls	r2, r1, #3
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	4642      	mov	r2, r8
 8002b5a:	189b      	adds	r3, r3, r2
 8002b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b60:	464b      	mov	r3, r9
 8002b62:	460a      	mov	r2, r1
 8002b64:	eb42 0303 	adc.w	r3, r2, r3
 8002b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b84:	4649      	mov	r1, r9
 8002b86:	008b      	lsls	r3, r1, #2
 8002b88:	4641      	mov	r1, r8
 8002b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b8e:	4641      	mov	r1, r8
 8002b90:	008a      	lsls	r2, r1, #2
 8002b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b96:	f7fd fb29 	bl	80001ec <__aeabi_uldivmod>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <UART_SetConfig+0x4e4>)
 8002ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2264      	movs	r2, #100	; 0x64
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	1acb      	subs	r3, r1, r3
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	3332      	adds	r3, #50	; 0x32
 8002bb4:	4a33      	ldr	r2, [pc, #204]	; (8002c84 <UART_SetConfig+0x4e4>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc0:	441c      	add	r4, r3
 8002bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	673b      	str	r3, [r7, #112]	; 0x70
 8002bca:	677a      	str	r2, [r7, #116]	; 0x74
 8002bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	1891      	adds	r1, r2, r2
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	415b      	adcs	r3, r3
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002be0:	4641      	mov	r1, r8
 8002be2:	1851      	adds	r1, r2, r1
 8002be4:	6039      	str	r1, [r7, #0]
 8002be6:	4649      	mov	r1, r9
 8002be8:	414b      	adcs	r3, r1
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	00cb      	lsls	r3, r1, #3
 8002bfc:	4651      	mov	r1, sl
 8002bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c02:	4651      	mov	r1, sl
 8002c04:	00ca      	lsls	r2, r1, #3
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	189b      	adds	r3, r3, r2
 8002c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c12:	464b      	mov	r3, r9
 8002c14:	460a      	mov	r2, r1
 8002c16:	eb42 0303 	adc.w	r3, r2, r3
 8002c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	663b      	str	r3, [r7, #96]	; 0x60
 8002c26:	667a      	str	r2, [r7, #100]	; 0x64
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c34:	4649      	mov	r1, r9
 8002c36:	008b      	lsls	r3, r1, #2
 8002c38:	4641      	mov	r1, r8
 8002c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c3e:	4641      	mov	r1, r8
 8002c40:	008a      	lsls	r2, r1, #2
 8002c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c46:	f7fd fad1 	bl	80001ec <__aeabi_uldivmod>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <UART_SetConfig+0x4e4>)
 8002c50:	fba3 1302 	umull	r1, r3, r3, r2
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	2164      	movs	r1, #100	; 0x64
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	3332      	adds	r3, #50	; 0x32
 8002c62:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <UART_SetConfig+0x4e4>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	f003 020f 	and.w	r2, r3, #15
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4422      	add	r2, r4
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c84:	51eb851f 	.word	0x51eb851f

08002c88 <memset>:
 8002c88:	4402      	add	r2, r0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d100      	bne.n	8002c92 <memset+0xa>
 8002c90:	4770      	bx	lr
 8002c92:	f803 1b01 	strb.w	r1, [r3], #1
 8002c96:	e7f9      	b.n	8002c8c <memset+0x4>

08002c98 <__libc_init_array>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	4d0d      	ldr	r5, [pc, #52]	; (8002cd0 <__libc_init_array+0x38>)
 8002c9c:	4c0d      	ldr	r4, [pc, #52]	; (8002cd4 <__libc_init_array+0x3c>)
 8002c9e:	1b64      	subs	r4, r4, r5
 8002ca0:	10a4      	asrs	r4, r4, #2
 8002ca2:	2600      	movs	r6, #0
 8002ca4:	42a6      	cmp	r6, r4
 8002ca6:	d109      	bne.n	8002cbc <__libc_init_array+0x24>
 8002ca8:	4d0b      	ldr	r5, [pc, #44]	; (8002cd8 <__libc_init_array+0x40>)
 8002caa:	4c0c      	ldr	r4, [pc, #48]	; (8002cdc <__libc_init_array+0x44>)
 8002cac:	f000 f818 	bl	8002ce0 <_init>
 8002cb0:	1b64      	subs	r4, r4, r5
 8002cb2:	10a4      	asrs	r4, r4, #2
 8002cb4:	2600      	movs	r6, #0
 8002cb6:	42a6      	cmp	r6, r4
 8002cb8:	d105      	bne.n	8002cc6 <__libc_init_array+0x2e>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc0:	4798      	blx	r3
 8002cc2:	3601      	adds	r6, #1
 8002cc4:	e7ee      	b.n	8002ca4 <__libc_init_array+0xc>
 8002cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cca:	4798      	blx	r3
 8002ccc:	3601      	adds	r6, #1
 8002cce:	e7f2      	b.n	8002cb6 <__libc_init_array+0x1e>
 8002cd0:	08002d18 	.word	0x08002d18
 8002cd4:	08002d18 	.word	0x08002d18
 8002cd8:	08002d18 	.word	0x08002d18
 8002cdc:	08002d1c 	.word	0x08002d1c

08002ce0 <_init>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr

08002cec <_fini>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr
