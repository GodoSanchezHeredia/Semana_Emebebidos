
Ejemplo17_ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004030  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b10  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce0  08005ce0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005ce0  08005ce0  00015ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ce8  08005ce8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cec  08005cec  00015cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000060  08005d50  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005d50  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b59  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ab8  00000000  00000000  00027c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  000296e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a9  00000000  00000000  00029e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001514d  00000000  00000000  0002a441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a6a  00000000  00000000  0003f58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082c6a  00000000  00000000  00048ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002280  00000000  00000000  000cbc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000cdee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080041b8 	.word	0x080041b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080041b8 	.word	0x080041b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b089      	sub	sp, #36	; 0x24
 8000580:	af00      	add	r7, sp, #0
 8000582:	4604      	mov	r4, r0
 8000584:	4608      	mov	r0, r1
 8000586:	4611      	mov	r1, r2
 8000588:	461a      	mov	r2, r3
 800058a:	4623      	mov	r3, r4
 800058c:	80fb      	strh	r3, [r7, #6]
 800058e:	4603      	mov	r3, r0
 8000590:	80bb      	strh	r3, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	807b      	strh	r3, [r7, #2]
 8000596:	4613      	mov	r3, r2
 8000598:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 800059a:	887b      	ldrh	r3, [r7, #2]
 800059c:	3b01      	subs	r3, #1
 800059e:	61fb      	str	r3, [r7, #28]
	int y = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
	int dy = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 80005ac:	887b      	ldrh	r3, [r7, #2]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 80005b6:	e08d      	b.n	80006d4 <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	4413      	add	r3, r2
 80005c0:	b298      	uxth	r0, r3
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	883a      	ldrh	r2, [r7, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	f000 fd08 	bl	8000fe4 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	4413      	add	r3, r2
 80005dc:	b298      	uxth	r0, r3
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	88bb      	ldrh	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	883a      	ldrh	r2, [r7, #0]
 80005ea:	4619      	mov	r1, r3
 80005ec:	f000 fcfa 	bl	8000fe4 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	88fa      	ldrh	r2, [r7, #6]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	b298      	uxth	r0, r3
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	88bb      	ldrh	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	b29b      	uxth	r3, r3
 8000604:	883a      	ldrh	r2, [r7, #0]
 8000606:	4619      	mov	r1, r3
 8000608:	f000 fcec 	bl	8000fe4 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	b29b      	uxth	r3, r3
 8000610:	88fa      	ldrh	r2, [r7, #6]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	b298      	uxth	r0, r3
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	b29a      	uxth	r2, r3
 800061a:	88bb      	ldrh	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	b29b      	uxth	r3, r3
 8000620:	883a      	ldrh	r2, [r7, #0]
 8000622:	4619      	mov	r1, r3
 8000624:	f000 fcde 	bl	8000fe4 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	b29b      	uxth	r3, r3
 800062c:	88fa      	ldrh	r2, [r7, #6]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	b298      	uxth	r0, r3
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	b29b      	uxth	r3, r3
 8000636:	88ba      	ldrh	r2, [r7, #4]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	b29b      	uxth	r3, r3
 800063c:	883a      	ldrh	r2, [r7, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	f000 fcd0 	bl	8000fe4 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	b29b      	uxth	r3, r3
 8000648:	88fa      	ldrh	r2, [r7, #6]
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	b298      	uxth	r0, r3
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	b29b      	uxth	r3, r3
 8000652:	88ba      	ldrh	r2, [r7, #4]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	883a      	ldrh	r2, [r7, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	f000 fcc2 	bl	8000fe4 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	b29a      	uxth	r2, r3
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	4413      	add	r3, r2
 8000668:	b298      	uxth	r0, r3
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	b29b      	uxth	r3, r3
 800066e:	88ba      	ldrh	r2, [r7, #4]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	b29b      	uxth	r3, r3
 8000674:	883a      	ldrh	r2, [r7, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	f000 fcb4 	bl	8000fe4 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	b29a      	uxth	r2, r3
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	4413      	add	r3, r2
 8000684:	b298      	uxth	r0, r3
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	b29b      	uxth	r3, r3
 800068a:	88ba      	ldrh	r2, [r7, #4]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	b29b      	uxth	r3, r3
 8000690:	883a      	ldrh	r2, [r7, #0]
 8000692:	4619      	mov	r1, r3
 8000694:	f000 fca6 	bl	8000fe4 <ILI9341_DrawPixel>

		if (err <= 0)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b00      	cmp	r3, #0
 800069c:	dc09      	bgt.n	80006b2 <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	3301      	adds	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
			err += dy;
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	4413      	add	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
			dy += 2;
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	3302      	adds	r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dd0d      	ble.n	80006d4 <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	61fb      	str	r3, [r7, #28]
			dx += 2;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	3302      	adds	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 80006c4:	887b      	ldrh	r3, [r7, #2]
 80006c6:	425b      	negs	r3, r3
 80006c8:	005a      	lsls	r2, r3, #1
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	4413      	add	r3, r2
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	4413      	add	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 80006d4:	69fa      	ldr	r2, [r7, #28]
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	429a      	cmp	r2, r3
 80006da:	f6bf af6d 	bge.w	80005b8 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	3724      	adds	r7, #36	; 0x24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd90      	pop	{r4, r7, pc}

080006e8 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b08b      	sub	sp, #44	; 0x2c
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4604      	mov	r4, r0
 80006f0:	4608      	mov	r0, r1
 80006f2:	4611      	mov	r1, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	4623      	mov	r3, r4
 80006f8:	80fb      	strh	r3, [r7, #6]
 80006fa:	4603      	mov	r3, r0
 80006fc:	80bb      	strh	r3, [r7, #4]
 80006fe:	460b      	mov	r3, r1
 8000700:	807b      	strh	r3, [r7, #2]
 8000702:	4613      	mov	r3, r2
 8000704:	803b      	strh	r3, [r7, #0]

	int x = radius;
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 800070e:	887b      	ldrh	r3, [r7, #2]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	f1c3 0301 	rsb	r3, r3, #1
 8000716:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8000720:	e061      	b.n	80007e6 <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8000722:	88fa      	ldrh	r2, [r7, #6]
 8000724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	e018      	b.n	800075e <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	b298      	uxth	r0, r3
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	b29a      	uxth	r2, r3
 8000734:	88bb      	ldrh	r3, [r7, #4]
 8000736:	4413      	add	r3, r2
 8000738:	b29b      	uxth	r3, r3
 800073a:	883a      	ldrh	r2, [r7, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	f000 fc51 	bl	8000fe4 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	b298      	uxth	r0, r3
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	b29b      	uxth	r3, r3
 800074a:	88ba      	ldrh	r2, [r7, #4]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	b29b      	uxth	r3, r3
 8000750:	883a      	ldrh	r2, [r7, #0]
 8000752:	4619      	mov	r1, r3
 8000754:	f000 fc46 	bl	8000fe4 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	3301      	adds	r3, #1
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	88fa      	ldrh	r2, [r7, #6]
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	4413      	add	r3, r2
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	429a      	cmp	r2, r3
 8000768:	dde0      	ble.n	800072c <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 800076a:	88fa      	ldrh	r2, [r7, #6]
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	e018      	b.n	80007a6 <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	b298      	uxth	r0, r3
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	b29a      	uxth	r2, r3
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	b29b      	uxth	r3, r3
 8000782:	883a      	ldrh	r2, [r7, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f000 fc2d 	bl	8000fe4 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	b298      	uxth	r0, r3
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	b29b      	uxth	r3, r3
 8000792:	88ba      	ldrh	r2, [r7, #4]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	b29b      	uxth	r3, r3
 8000798:	883a      	ldrh	r2, [r7, #0]
 800079a:	4619      	mov	r1, r3
 800079c:	f000 fc22 	bl	8000fe4 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	88fa      	ldrh	r2, [r7, #6]
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	4413      	add	r3, r2
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	dde0      	ble.n	8000774 <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 80007b2:	6a3b      	ldr	r3, [r7, #32]
 80007b4:	3301      	adds	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	4413      	add	r3, r2
 80007be:	617b      	str	r3, [r7, #20]
		yChange += 2;
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	3302      	adds	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	005a      	lsls	r2, r3, #1
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	4413      	add	r3, r2
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dd09      	ble.n	80007e6 <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 80007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d4:	3b01      	subs	r3, #1
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	4413      	add	r3, r2
 80007de:	617b      	str	r3, [r7, #20]
			xChange += 2;
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	3302      	adds	r3, #2
 80007e4:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 80007e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	da99      	bge.n	8000722 <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	372c      	adds	r7, #44	; 0x2c
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd90      	pop	{r4, r7, pc}

080007f8 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b08d      	sub	sp, #52	; 0x34
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	4611      	mov	r1, r2
 8000802:	461a      	mov	r2, r3
 8000804:	4603      	mov	r3, r0
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	460b      	mov	r3, r1
 800080a:	81bb      	strh	r3, [r7, #12]
 800080c:	4613      	mov	r3, r2
 800080e:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	2b1e      	cmp	r3, #30
 8000814:	d964      	bls.n	80008e0 <ILI9341_DrawChar+0xe8>
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db60      	blt.n	80008e0 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	3301      	adds	r3, #1
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	3302      	adds	r3, #2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	3303      	adds	r3, #3
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	3b20      	subs	r3, #32
 8000840:	7ffa      	ldrb	r2, [r7, #31]
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	3304      	adds	r3, #4
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	4413      	add	r3, r2
 800084c:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800084e:	7fbb      	ldrb	r3, [r7, #30]
 8000850:	b29a      	uxth	r2, r3
 8000852:	7f7b      	ldrb	r3, [r7, #29]
 8000854:	b29c      	uxth	r4, r3
 8000856:	88f9      	ldrh	r1, [r7, #6]
 8000858:	89b8      	ldrh	r0, [r7, #12]
 800085a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	4623      	mov	r3, r4
 8000860:	f000 fc26 	bl	80010b0 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
 8000868:	e035      	b.n	80008d6 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
 800086e:	e02b      	b.n	80008c8 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000870:	7f3b      	ldrb	r3, [r7, #28]
 8000872:	6a3a      	ldr	r2, [r7, #32]
 8000874:	fb03 f202 	mul.w	r2, r3, r2
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	10db      	asrs	r3, r3, #3
 800087c:	f003 031f 	and.w	r3, r3, #31
 8000880:	4413      	add	r3, r2
 8000882:	3301      	adds	r3, #1
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	2201      	movs	r2, #1
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800089a:	7dfa      	ldrb	r2, [r7, #23]
 800089c:	7dbb      	ldrb	r3, [r7, #22]
 800089e:	4013      	ands	r3, r2
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00d      	beq.n	80008c2 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80008a6:	6a3b      	ldr	r3, [r7, #32]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	4413      	add	r3, r2
 80008ae:	b298      	uxth	r0, r3
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	88fb      	ldrh	r3, [r7, #6]
 80008b6:	4413      	add	r3, r2
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80008bc:	4619      	mov	r1, r3
 80008be:	f000 fb91 	bl	8000fe4 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	3301      	adds	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
 80008c8:	7fbb      	ldrb	r3, [r7, #30]
 80008ca:	6a3a      	ldr	r2, [r7, #32]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	dbcf      	blt.n	8000870 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	3301      	adds	r3, #1
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
 80008d6:	7f7b      	ldrb	r3, [r7, #29]
 80008d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008da:	429a      	cmp	r2, r3
 80008dc:	dbc5      	blt.n	800086a <ILI9341_DrawChar+0x72>
 80008de:	e000      	b.n	80008e2 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80008e0:	bf00      	nop
			}
		}
	}
}
 80008e2:	372c      	adds	r7, #44	; 0x2c
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd90      	pop	{r4, r7, pc}

080008e8 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	460b      	mov	r3, r1
 80008f8:	80fb      	strh	r3, [r7, #6]
 80008fa:	4613      	mov	r3, r2
 80008fc:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3301      	adds	r3, #1
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	77bb      	strb	r3, [r7, #30]

	while (*str)
 800090c:	e02d      	b.n	800096a <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	7818      	ldrb	r0, [r3, #0]
 8000912:	88b9      	ldrh	r1, [r7, #4]
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	460b      	mov	r3, r1
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	f7ff ff69 	bl	80007f8 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3b20      	subs	r3, #32
 800092c:	7ffa      	ldrb	r2, [r7, #31]
 800092e:	fb02 f303 	mul.w	r3, r2, r3
 8000932:	3304      	adds	r3, #4
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	4413      	add	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000940:	7dfb      	ldrb	r3, [r7, #23]
 8000942:	1c9a      	adds	r2, r3, #2
 8000944:	7fbb      	ldrb	r3, [r7, #30]
 8000946:	429a      	cmp	r2, r3
 8000948:	da07      	bge.n	800095a <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800094a:	7dfb      	ldrb	r3, [r7, #23]
 800094c:	b29a      	uxth	r2, r3
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	4413      	add	r3, r2
 8000952:	b29b      	uxth	r3, r3
 8000954:	3302      	adds	r3, #2
 8000956:	80fb      	strh	r3, [r7, #6]
 8000958:	e004      	b.n	8000964 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 800095a:	7fbb      	ldrb	r3, [r7, #30]
 800095c:	b29a      	uxth	r2, r3
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	4413      	add	r3, r2
 8000962:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3301      	adds	r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
	while (*str)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1cd      	bne.n	800090e <ILI9341_DrawText+0x26>
	}
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_SPI_TxCpltCallback+0x24>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d104      	bne.n	8000996 <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2140      	movs	r1, #64	; 0x40
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <HAL_SPI_TxCpltCallback+0x28>)
 8000992:	f001 ff13 	bl	80027bc <HAL_GPIO_WritePin>
  }
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000007c 	.word	0x2000007c
 80009a4:	40020400 	.word	0x40020400

080009a8 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80009b2:	bf00      	nop
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <ILI9341_SPI_Tx+0x30>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d1f8      	bne.n	80009b4 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	2201      	movs	r2, #1
 80009c6:	4619      	mov	r1, r3
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <ILI9341_SPI_Tx+0x30>)
 80009ca:	f002 fd3b 	bl	8003444 <HAL_SPI_Transmit_DMA>
//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000007c 	.word	0x2000007c

080009dc <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80009e8:	bf00      	nop
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <ILI9341_SPI_TxBuffer+0x30>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d1f8      	bne.n	80009ea <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80009f8:	887b      	ldrh	r3, [r7, #2]
 80009fa:	461a      	mov	r2, r3
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4803      	ldr	r0, [pc, #12]	; (8000a0c <ILI9341_SPI_TxBuffer+0x30>)
 8000a00:	f002 fd20 	bl	8003444 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000007c 	.word	0x2000007c

08000a10 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4808      	ldr	r0, [pc, #32]	; (8000a40 <ILI9341_WriteCommand+0x30>)
 8000a20:	f001 fecc 	bl	80027bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000a24:	2200      	movs	r2, #0
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	4806      	ldr	r0, [pc, #24]	; (8000a44 <ILI9341_WriteCommand+0x34>)
 8000a2a:	f001 fec7 	bl	80027bc <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ffb9 	bl	80009a8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020400 	.word	0x40020400

08000a48 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000a52:	2201      	movs	r2, #1
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	4808      	ldr	r0, [pc, #32]	; (8000a78 <ILI9341_WriteData+0x30>)
 8000a58:	f001 feb0 	bl	80027bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2140      	movs	r1, #64	; 0x40
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <ILI9341_WriteData+0x34>)
 8000a62:	f001 feab 	bl	80027bc <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff9d 	bl	80009a8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	40020400 	.word	0x40020400

08000a80 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <ILI9341_WriteBuffer+0x34>)
 8000a92:	f001 fe93 	bl	80027bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000a96:	2200      	movs	r2, #0
 8000a98:	2140      	movs	r1, #64	; 0x40
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <ILI9341_WriteBuffer+0x38>)
 8000a9c:	f001 fe8e 	bl	80027bc <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff99 	bl	80009dc <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	40020400 	.word	0x40020400

08000abc <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4623      	mov	r3, r4
 8000acc:	80fb      	strh	r3, [r7, #6]
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80bb      	strh	r3, [r7, #4]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	807b      	strh	r3, [r7, #2]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000afa:	202a      	movs	r0, #42	; 0x2a
 8000afc:	f7ff ff88 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2104      	movs	r1, #4
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ffba 	bl	8000a80 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000b0c:	88bb      	ldrh	r3, [r7, #4]
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000b16:	88bb      	ldrh	r3, [r7, #4]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000b1c:	883b      	ldrh	r3, [r7, #0]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000b26:	883b      	ldrh	r3, [r7, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000b2c:	202b      	movs	r0, #43	; 0x2b
 8000b2e:	f7ff ff6f 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	2104      	movs	r1, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ffa1 	bl	8000a80 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000b3e:	202c      	movs	r0, #44	; 0x2c
 8000b40:	f7ff ff66 	bl	8000a10 <ILI9341_WriteCommand>
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd90      	pop	{r4, r7, pc}

08000b4c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <ILI9341_Reset+0x40>)
 8000b58:	f001 fe30 	bl	80027bc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b5c:	200a      	movs	r0, #10
 8000b5e:	f001 f803 	bl	8001b68 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000b62:	2200      	movs	r2, #0
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	480a      	ldr	r0, [pc, #40]	; (8000b90 <ILI9341_Reset+0x44>)
 8000b68:	f001 fe28 	bl	80027bc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b6c:	200a      	movs	r0, #10
 8000b6e:	f000 fffb 	bl	8001b68 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <ILI9341_Reset+0x40>)
 8000b7a:	f001 fe1f 	bl	80027bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2140      	movs	r1, #64	; 0x40
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <ILI9341_Reset+0x44>)
 8000b84:	f001 fe1a 	bl	80027bc <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020400 	.word	0x40020400

08000b94 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9e:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <ILI9341_Enable+0x14>)
 8000ba0:	f001 fe0c 	bl	80027bc <HAL_GPIO_WritePin>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40020000 	.word	0x40020000

08000bac <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000bb0:	f7ff fff0 	bl	8000b94 <ILI9341_Enable>
	ILI9341_Reset();
 8000bb4:	f7ff ffca 	bl	8000b4c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff ff29 	bl	8000a10 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000bbe:	200a      	movs	r0, #10
 8000bc0:	f000 ffd2 	bl	8001b68 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000bc4:	20cb      	movs	r0, #203	; 0xcb
 8000bc6:	f7ff ff23 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000bca:	2039      	movs	r0, #57	; 0x39
 8000bcc:	f7ff ff3c 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000bd0:	202c      	movs	r0, #44	; 0x2c
 8000bd2:	f7ff ff39 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ff36 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000bdc:	2034      	movs	r0, #52	; 0x34
 8000bde:	f7ff ff33 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff ff30 	bl	8000a48 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000be8:	20cf      	movs	r0, #207	; 0xcf
 8000bea:	f7ff ff11 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ff2a 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000bf4:	20c1      	movs	r0, #193	; 0xc1
 8000bf6:	f7ff ff27 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000bfa:	2030      	movs	r0, #48	; 0x30
 8000bfc:	f7ff ff24 	bl	8000a48 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000c00:	20e8      	movs	r0, #232	; 0xe8
 8000c02:	f7ff ff05 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000c06:	2085      	movs	r0, #133	; 0x85
 8000c08:	f7ff ff1e 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff ff1b 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000c12:	2078      	movs	r0, #120	; 0x78
 8000c14:	f7ff ff18 	bl	8000a48 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000c18:	20ea      	movs	r0, #234	; 0xea
 8000c1a:	f7ff fef9 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff ff12 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff ff0f 	bl	8000a48 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000c2a:	20ed      	movs	r0, #237	; 0xed
 8000c2c:	f7ff fef0 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000c30:	2064      	movs	r0, #100	; 0x64
 8000c32:	f7ff ff09 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f7ff ff06 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000c3c:	2012      	movs	r0, #18
 8000c3e:	f7ff ff03 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000c42:	2081      	movs	r0, #129	; 0x81
 8000c44:	f7ff ff00 	bl	8000a48 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000c48:	20f7      	movs	r0, #247	; 0xf7
 8000c4a:	f7ff fee1 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000c4e:	2020      	movs	r0, #32
 8000c50:	f7ff fefa 	bl	8000a48 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000c54:	20c0      	movs	r0, #192	; 0xc0
 8000c56:	f7ff fedb 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000c5a:	2023      	movs	r0, #35	; 0x23
 8000c5c:	f7ff fef4 	bl	8000a48 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000c60:	20c1      	movs	r0, #193	; 0xc1
 8000c62:	f7ff fed5 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000c66:	2010      	movs	r0, #16
 8000c68:	f7ff feee 	bl	8000a48 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000c6c:	20c5      	movs	r0, #197	; 0xc5
 8000c6e:	f7ff fecf 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000c72:	203e      	movs	r0, #62	; 0x3e
 8000c74:	f7ff fee8 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000c78:	2028      	movs	r0, #40	; 0x28
 8000c7a:	f7ff fee5 	bl	8000a48 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000c7e:	20c7      	movs	r0, #199	; 0xc7
 8000c80:	f7ff fec6 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000c84:	2086      	movs	r0, #134	; 0x86
 8000c86:	f7ff fedf 	bl	8000a48 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000c8a:	2036      	movs	r0, #54	; 0x36
 8000c8c:	f7ff fec0 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000c90:	2048      	movs	r0, #72	; 0x48
 8000c92:	f7ff fed9 	bl	8000a48 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000c96:	203a      	movs	r0, #58	; 0x3a
 8000c98:	f7ff feba 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000c9c:	2055      	movs	r0, #85	; 0x55
 8000c9e:	f7ff fed3 	bl	8000a48 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000ca2:	20b1      	movs	r0, #177	; 0xb1
 8000ca4:	f7ff feb4 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fecd 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000cae:	2018      	movs	r0, #24
 8000cb0:	f7ff feca 	bl	8000a48 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000cb4:	20b6      	movs	r0, #182	; 0xb6
 8000cb6:	f7ff feab 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000cba:	2008      	movs	r0, #8
 8000cbc:	f7ff fec4 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000cc0:	2082      	movs	r0, #130	; 0x82
 8000cc2:	f7ff fec1 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000cc6:	2027      	movs	r0, #39	; 0x27
 8000cc8:	f7ff febe 	bl	8000a48 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000ccc:	20f2      	movs	r0, #242	; 0xf2
 8000cce:	f7ff fe9f 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff feb8 	bl	8000a48 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000cd8:	2026      	movs	r0, #38	; 0x26
 8000cda:	f7ff fe99 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff feb2 	bl	8000a48 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000ce4:	20e0      	movs	r0, #224	; 0xe0
 8000ce6:	f7ff fe93 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000cea:	200f      	movs	r0, #15
 8000cec:	f7ff feac 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000cf0:	2031      	movs	r0, #49	; 0x31
 8000cf2:	f7ff fea9 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000cf6:	202b      	movs	r0, #43	; 0x2b
 8000cf8:	f7ff fea6 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000cfc:	200c      	movs	r0, #12
 8000cfe:	f7ff fea3 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d02:	200e      	movs	r0, #14
 8000d04:	f7ff fea0 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000d08:	2008      	movs	r0, #8
 8000d0a:	f7ff fe9d 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000d0e:	204e      	movs	r0, #78	; 0x4e
 8000d10:	f7ff fe9a 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000d14:	20f1      	movs	r0, #241	; 0xf1
 8000d16:	f7ff fe97 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000d1a:	2037      	movs	r0, #55	; 0x37
 8000d1c:	f7ff fe94 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000d20:	2007      	movs	r0, #7
 8000d22:	f7ff fe91 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000d26:	2010      	movs	r0, #16
 8000d28:	f7ff fe8e 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f7ff fe8b 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d32:	200e      	movs	r0, #14
 8000d34:	f7ff fe88 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000d38:	2009      	movs	r0, #9
 8000d3a:	f7ff fe85 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fe82 	bl	8000a48 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000d44:	20e1      	movs	r0, #225	; 0xe1
 8000d46:	f7ff fe63 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fe7c 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d50:	200e      	movs	r0, #14
 8000d52:	f7ff fe79 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000d56:	2014      	movs	r0, #20
 8000d58:	f7ff fe76 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f7ff fe73 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000d62:	2011      	movs	r0, #17
 8000d64:	f7ff fe70 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000d68:	2007      	movs	r0, #7
 8000d6a:	f7ff fe6d 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000d6e:	2031      	movs	r0, #49	; 0x31
 8000d70:	f7ff fe6a 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000d74:	20c1      	movs	r0, #193	; 0xc1
 8000d76:	f7ff fe67 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000d7a:	2048      	movs	r0, #72	; 0x48
 8000d7c:	f7ff fe64 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000d80:	2008      	movs	r0, #8
 8000d82:	f7ff fe61 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f7ff fe5e 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000d8c:	200c      	movs	r0, #12
 8000d8e:	f7ff fe5b 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000d92:	2031      	movs	r0, #49	; 0x31
 8000d94:	f7ff fe58 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000d98:	2036      	movs	r0, #54	; 0x36
 8000d9a:	f7ff fe55 	bl	8000a48 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f7ff fe52 	bl	8000a48 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000da4:	2011      	movs	r0, #17
 8000da6:	f7ff fe33 	bl	8000a10 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f000 fedc 	bl	8001b68 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000db0:	2029      	movs	r0, #41	; 0x29
 8000db2:	f7ff fe2d 	bl	8000a10 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f802 	bl	8000dc0 <ILI9341_SetRotation>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000dca:	2036      	movs	r0, #54	; 0x36
 8000dcc:	f7ff fe20 	bl	8000a10 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f000 fec9 	bl	8001b68 <HAL_Delay>

	switch(rotation)
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d837      	bhi.n	8000e4c <ILI9341_SetRotation+0x8c>
 8000ddc:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <ILI9341_SetRotation+0x24>)
 8000dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de2:	bf00      	nop
 8000de4:	08000df5 	.word	0x08000df5
 8000de8:	08000e0b 	.word	0x08000e0b
 8000dec:	08000e21 	.word	0x08000e21
 8000df0:	08000e37 	.word	0x08000e37
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000df4:	2048      	movs	r0, #72	; 0x48
 8000df6:	f7ff fe27 	bl	8000a48 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <ILI9341_SetRotation+0x98>)
 8000dfc:	22f0      	movs	r2, #240	; 0xf0
 8000dfe:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <ILI9341_SetRotation+0x9c>)
 8000e02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e06:	801a      	strh	r2, [r3, #0]
		break;
 8000e08:	e021      	b.n	8000e4e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000e0a:	2028      	movs	r0, #40	; 0x28
 8000e0c:	f7ff fe1c 	bl	8000a48 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <ILI9341_SetRotation+0x98>)
 8000e12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e16:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <ILI9341_SetRotation+0x9c>)
 8000e1a:	22f0      	movs	r2, #240	; 0xf0
 8000e1c:	801a      	strh	r2, [r3, #0]
		break;
 8000e1e:	e016      	b.n	8000e4e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000e20:	2088      	movs	r0, #136	; 0x88
 8000e22:	f7ff fe11 	bl	8000a48 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <ILI9341_SetRotation+0x98>)
 8000e28:	22f0      	movs	r2, #240	; 0xf0
 8000e2a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <ILI9341_SetRotation+0x9c>)
 8000e2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e32:	801a      	strh	r2, [r3, #0]
		break;
 8000e34:	e00b      	b.n	8000e4e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000e36:	20e8      	movs	r0, #232	; 0xe8
 8000e38:	f7ff fe06 	bl	8000a48 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <ILI9341_SetRotation+0x98>)
 8000e3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e42:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <ILI9341_SetRotation+0x9c>)
 8000e46:	22f0      	movs	r2, #240	; 0xf0
 8000e48:	801a      	strh	r2, [r3, #0]
		break;
 8000e4a:	e000      	b.n	8000e4e <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000e4c:	bf00      	nop
	}
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000002 	.word	0x20000002
 8000e5c:	20000000 	.word	0x20000000

08000e60 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e64:	b08d      	sub	sp, #52	; 0x34
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	6039      	str	r1, [r7, #0]
 8000e6c:	80fb      	strh	r3, [r7, #6]
 8000e6e:	466b      	mov	r3, sp
 8000e70:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e7e:	d202      	bcs.n	8000e86 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e84:	e002      	b.n	8000e8c <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000e86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	483e      	ldr	r0, [pc, #248]	; (8000f8c <ILI9341_DrawColorBurst+0x12c>)
 8000e92:	f001 fc93 	bl	80027bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2140      	movs	r1, #64	; 0x40
 8000e9a:	483d      	ldr	r0, [pc, #244]	; (8000f90 <ILI9341_DrawColorBurst+0x130>)
 8000e9c:	f001 fc8e 	bl	80027bc <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000eac:	460b      	mov	r3, r1
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	4688      	mov	r8, r1
 8000eb6:	4699      	mov	r9, r3
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ec4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ec8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ecc:	2300      	movs	r3, #0
 8000ece:	460c      	mov	r4, r1
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	00eb      	lsls	r3, r5, #3
 8000edc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ee0:	00e2      	lsls	r2, r4, #3
 8000ee2:	1dcb      	adds	r3, r1, #7
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8000eec:	466b      	mov	r3, sp
 8000eee:	3300      	adds	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ef6:	e00e      	b.n	8000f16 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efc:	4413      	add	r3, r2
 8000efe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f02:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f06:	3301      	adds	r3, #1
 8000f08:	88fa      	ldrh	r2, [r7, #6]
 8000f0a:	b2d1      	uxtb	r1, r2
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f12:	3302      	adds	r3, #2
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3ec      	bcc.n	8000ef8 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2c:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f32:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f38:	fb01 f202 	mul.w	r2, r1, r2
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d010      	beq.n	8000f68 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4a:	e009      	b.n	8000f60 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	230a      	movs	r3, #10
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	480f      	ldr	r0, [pc, #60]	; (8000f94 <ILI9341_DrawColorBurst+0x134>)
 8000f56:	f002 f938 	bl	80031ca <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3f1      	bcc.n	8000f4c <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <ILI9341_DrawColorBurst+0x134>)
 8000f72:	f002 f92a 	bl	80031ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2140      	movs	r1, #64	; 0x40
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <ILI9341_DrawColorBurst+0x130>)
 8000f7c:	f001 fc1e 	bl	80027bc <HAL_GPIO_WritePin>
 8000f80:	46b5      	mov	sp, r6
}
 8000f82:	bf00      	nop
 8000f84:	3734      	adds	r7, #52	; 0x34
 8000f86:	46bd      	mov	sp, r7
 8000f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020400 	.word	0x40020400
 8000f94:	2000007c 	.word	0x2000007c

08000f98 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <ILI9341_FillScreen+0x44>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <ILI9341_FillScreen+0x48>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fd83 	bl	8000abc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <ILI9341_FillScreen+0x44>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <ILI9341_FillScreen+0x48>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	fb02 f303 	mul.w	r3, r2, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff46 	bl	8000e60 <ILI9341_DrawColorBurst>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000002 	.word	0x20000002
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	80bb      	strh	r3, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <ILI9341_DrawPixel+0xc4>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	88fa      	ldrh	r2, [r7, #6]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d24d      	bcs.n	800109e <ILI9341_DrawPixel+0xba>
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <ILI9341_DrawPixel+0xc8>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	88ba      	ldrh	r2, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	d247      	bcs.n	800109e <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	753b      	strb	r3, [r7, #20]
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	757b      	strb	r3, [r7, #21]
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	3301      	adds	r3, #1
 8001022:	121b      	asrs	r3, r3, #8
 8001024:	b2db      	uxtb	r3, r3
 8001026:	75bb      	strb	r3, [r7, #22]
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	3301      	adds	r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001032:	88bb      	ldrh	r3, [r7, #4]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	b29b      	uxth	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	743b      	strb	r3, [r7, #16]
 800103c:	88bb      	ldrh	r3, [r7, #4]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	747b      	strb	r3, [r7, #17]
 8001042:	88bb      	ldrh	r3, [r7, #4]
 8001044:	3301      	adds	r3, #1
 8001046:	121b      	asrs	r3, r3, #8
 8001048:	b2db      	uxtb	r3, r3
 800104a:	74bb      	strb	r3, [r7, #18]
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	3301      	adds	r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	b29b      	uxth	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	733b      	strb	r3, [r7, #12]
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001066:	202a      	movs	r0, #42	; 0x2a
 8001068:	f7ff fcd2 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2104      	movs	r1, #4
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fd04 	bl	8000a80 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001078:	202b      	movs	r0, #43	; 0x2b
 800107a:	f7ff fcc9 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	2104      	movs	r1, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fcfb 	bl	8000a80 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800108a:	202c      	movs	r0, #44	; 0x2c
 800108c:	f7ff fcc0 	bl	8000a10 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fcf2 	bl	8000a80 <ILI9341_WriteBuffer>
 800109c:	e000      	b.n	80010a0 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800109e:	bf00      	nop
}
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000002 	.word	0x20000002
 80010ac:	20000000 	.word	0x20000000

080010b0 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4623      	mov	r3, r4
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	4603      	mov	r3, r0
 80010c4:	80bb      	strh	r3, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <ILI9341_DrawRectangle+0xb0>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	88fa      	ldrh	r2, [r7, #6]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d23d      	bcs.n	8001156 <ILI9341_DrawRectangle+0xa6>
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <ILI9341_DrawRectangle+0xb4>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	88ba      	ldrh	r2, [r7, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d237      	bcs.n	8001156 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80010e6:	88fa      	ldrh	r2, [r7, #6]
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <ILI9341_DrawRectangle+0xb0>)
 80010ee:	8812      	ldrh	r2, [r2, #0]
 80010f0:	b292      	uxth	r2, r2
 80010f2:	4293      	cmp	r3, r2
 80010f4:	dd05      	ble.n	8001102 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <ILI9341_DrawRectangle+0xb0>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001102:	88ba      	ldrh	r2, [r7, #4]
 8001104:	883b      	ldrh	r3, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <ILI9341_DrawRectangle+0xb4>)
 800110a:	8812      	ldrh	r2, [r2, #0]
 800110c:	b292      	uxth	r2, r2
 800110e:	4293      	cmp	r3, r2
 8001110:	dd05      	ble.n	800111e <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <ILI9341_DrawRectangle+0xb4>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	b29a      	uxth	r2, r3
 8001118:	88bb      	ldrh	r3, [r7, #4]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 800111e:	88fa      	ldrh	r2, [r7, #6]
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	4413      	add	r3, r2
 8001124:	b29b      	uxth	r3, r3
 8001126:	3b01      	subs	r3, #1
 8001128:	b29c      	uxth	r4, r3
 800112a:	88ba      	ldrh	r2, [r7, #4]
 800112c:	883b      	ldrh	r3, [r7, #0]
 800112e:	4413      	add	r3, r2
 8001130:	b29b      	uxth	r3, r3
 8001132:	3b01      	subs	r3, #1
 8001134:	b29b      	uxth	r3, r3
 8001136:	88b9      	ldrh	r1, [r7, #4]
 8001138:	88f8      	ldrh	r0, [r7, #6]
 800113a:	4622      	mov	r2, r4
 800113c:	f7ff fcbe 	bl	8000abc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001140:	883b      	ldrh	r3, [r7, #0]
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	461a      	mov	r2, r3
 800114a:	8b3b      	ldrh	r3, [r7, #24]
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fe86 	bl	8000e60 <ILI9341_DrawColorBurst>
 8001154:	e000      	b.n	8001158 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001156:	bf00      	nop
}
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}
 800115e:	bf00      	nop
 8001160:	20000002 	.word	0x20000002
 8001164:	20000000 	.word	0x20000000

08001168 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	4603      	mov	r3, r0
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	4613      	mov	r3, r2
 8001184:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <ILI9341_DrawHLine+0x80>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	88fa      	ldrh	r2, [r7, #6]
 800118e:	429a      	cmp	r2, r3
 8001190:	d225      	bcs.n	80011de <ILI9341_DrawHLine+0x76>
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <ILI9341_DrawHLine+0x84>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	88ba      	ldrh	r2, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d21f      	bcs.n	80011de <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <ILI9341_DrawHLine+0x80>)
 80011a6:	8812      	ldrh	r2, [r2, #0]
 80011a8:	b292      	uxth	r2, r2
 80011aa:	4293      	cmp	r3, r2
 80011ac:	dd05      	ble.n	80011ba <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <ILI9341_DrawHLine+0x80>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 80011ba:	88fa      	ldrh	r2, [r7, #6]
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	4413      	add	r3, r2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3b01      	subs	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	88b9      	ldrh	r1, [r7, #4]
 80011ca:	88f8      	ldrh	r0, [r7, #6]
 80011cc:	f7ff fc76 	bl	8000abc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 80011d0:	887a      	ldrh	r2, [r7, #2]
 80011d2:	883b      	ldrh	r3, [r7, #0]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fe42 	bl	8000e60 <ILI9341_DrawColorBurst>
 80011dc:	e000      	b.n	80011e0 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80011de:	bf00      	nop
}
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000002 	.word	0x20000002
 80011ec:	20000000 	.word	0x20000000

080011f0 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4604      	mov	r4, r0
 80011f8:	4608      	mov	r0, r1
 80011fa:	4611      	mov	r1, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	4623      	mov	r3, r4
 8001200:	80fb      	strh	r3, [r7, #6]
 8001202:	4603      	mov	r3, r0
 8001204:	80bb      	strh	r3, [r7, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	807b      	strh	r3, [r7, #2]
 800120a:	4613      	mov	r3, r2
 800120c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <ILI9341_DrawVLine+0x80>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	88fa      	ldrh	r2, [r7, #6]
 8001216:	429a      	cmp	r2, r3
 8001218:	d225      	bcs.n	8001266 <ILI9341_DrawVLine+0x76>
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <ILI9341_DrawVLine+0x84>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	88ba      	ldrh	r2, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d21f      	bcs.n	8001266 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001226:	88ba      	ldrh	r2, [r7, #4]
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	4413      	add	r3, r2
 800122c:	4a11      	ldr	r2, [pc, #68]	; (8001274 <ILI9341_DrawVLine+0x84>)
 800122e:	8812      	ldrh	r2, [r2, #0]
 8001230:	b292      	uxth	r2, r2
 8001232:	4293      	cmp	r3, r2
 8001234:	dd05      	ble.n	8001242 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <ILI9341_DrawVLine+0x84>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29a      	uxth	r2, r3
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001242:	88ba      	ldrh	r2, [r7, #4]
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	4413      	add	r3, r2
 8001248:	b29b      	uxth	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	88fa      	ldrh	r2, [r7, #6]
 8001250:	88b9      	ldrh	r1, [r7, #4]
 8001252:	88f8      	ldrh	r0, [r7, #6]
 8001254:	f7ff fc32 	bl	8000abc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001258:	887a      	ldrh	r2, [r7, #2]
 800125a:	883b      	ldrh	r3, [r7, #0]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fdfe 	bl	8000e60 <ILI9341_DrawColorBurst>
 8001264:	e000      	b.n	8001268 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001266:	bf00      	nop
}
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	20000002 	.word	0x20000002
 8001274:	20000000 	.word	0x20000000

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127e:	f000 fc01 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001282:	f000 f95f 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001286:	f000 fa1d 	bl	80016c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800128a:	f000 f9fb 	bl	8001684 <MX_DMA_Init>
  MX_SPI1_Init();
 800128e:	f000 f9c3 	bl	8001618 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
ILI9341_Init();
 8001292:	f7ff fc8b 	bl	8000bac <ILI9341_Init>
ILI9341_FillScreen(PINK);
 8001296:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800129a:	f7ff fe7d 	bl	8000f98 <ILI9341_FillScreen>
ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800129e:	2003      	movs	r0, #3
 80012a0:	f7ff fd8e 	bl	8000dc0 <ILI9341_SetRotation>
ILI9341_DrawText("CURSO STM32", FONT4, 80, 100, BLACK, PINK);
 80012a4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	2300      	movs	r3, #0
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2364      	movs	r3, #100	; 0x64
 80012b0:	2250      	movs	r2, #80	; 0x50
 80012b2:	49a0      	ldr	r1, [pc, #640]	; (8001534 <main+0x2bc>)
 80012b4:	48a0      	ldr	r0, [pc, #640]	; (8001538 <main+0x2c0>)
 80012b6:	f7ff fb17 	bl	80008e8 <ILI9341_DrawText>
HAL_Delay(500);
 80012ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012be:	f000 fc53 	bl	8001b68 <HAL_Delay>

ILI9341_FillScreen(BLACK  );
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fe68 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 80012c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012cc:	f000 fc4c 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen(NAVY );
 80012d0:	200f      	movs	r0, #15
 80012d2:	f7ff fe61 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 80012d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012da:	f000 fc45 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( DARKGREEN  );
 80012de:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 80012e2:	f7ff fe59 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 80012e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ea:	f000 fc3d 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( DARKCYAN    	);
 80012ee:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80012f2:	f7ff fe51 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 80012f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012fa:	f000 fc35 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( MAROON   );
 80012fe:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
 8001302:	f7ff fe49 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 8001306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800130a:	f000 fc2d 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen(PURPLE      		);
 800130e:	f647 000f 	movw	r0, #30735	; 0x780f
 8001312:	f7ff fe41 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 8001316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800131a:	f000 fc25 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( OLIVE       		);
 800131e:	f647 30e0 	movw	r0, #31712	; 0x7be0
 8001322:	f7ff fe39 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 8001326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800132a:	f000 fc1d 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( LIGHTGREY);
 800132e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8001332:	f7ff fe31 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 8001336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133a:	f000 fc15 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( DARKGREY  );
 800133e:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8001342:	f7ff fe29 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 8001346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134a:	f000 fc0d 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( BLUE    );
 800134e:	201f      	movs	r0, #31
 8001350:	f7ff fe22 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 8001354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001358:	f000 fc06 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( GREEN   );
 800135c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001360:	f7ff fe1a 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 8001364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001368:	f000 fbfe 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( CYAN    );
 800136c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001370:	f7ff fe12 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 8001374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001378:	f000 fbf6 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( RED     );
 800137c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001380:	f7ff fe0a 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 8001384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001388:	f000 fbee 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( MAGENTA  );
 800138c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001390:	f7ff fe02 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 8001394:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001398:	f000 fbe6 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( YELLOW   );
 800139c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80013a0:	f7ff fdfa 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 80013a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a8:	f000 fbde 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( WHITE    );
 80013ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013b0:	f7ff fdf2 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 80013b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b8:	f000 fbd6 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen(GREENYELLOW 	);
 80013bc:	f64a 70e5 	movw	r0, #45029	; 0xafe5
 80013c0:	f7ff fdea 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 80013c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c8:	f000 fbce 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( PINK  );
 80013cc:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80013d0:	f7ff fde2 	bl	8000f98 <ILI9341_FillScreen>
HAL_Delay(1000);
 80013d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d8:	f000 fbc6 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( WHITE  );
 80013dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013e0:	f7ff fdda 	bl	8000f98 <ILI9341_FillScreen>
char Buffer[35];
for (uint8_t var = 0; var < 10; ++var) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013ea:	e05f      	b.n	80014ac <main+0x234>
	sprintf(Buffer,"Contador en %d",var);
 80013ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4952      	ldr	r1, [pc, #328]	; (800153c <main+0x2c4>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 fa3b 	bl	8003870 <siprintf>
	ILI9341_DrawText(Buffer, FONT3, 10, 10, BLACK, WHITE);
 80013fa:	1d38      	adds	r0, r7, #4
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	230a      	movs	r3, #10
 8001408:	220a      	movs	r2, #10
 800140a:	494d      	ldr	r1, [pc, #308]	; (8001540 <main+0x2c8>)
 800140c:	f7ff fa6c 	bl	80008e8 <ILI9341_DrawText>
	ILI9341_DrawText(Buffer, FONT3, 10, 30, BLUE, WHITE);
 8001410:	1d38      	adds	r0, r7, #4
 8001412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	231f      	movs	r3, #31
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	231e      	movs	r3, #30
 800141e:	220a      	movs	r2, #10
 8001420:	4947      	ldr	r1, [pc, #284]	; (8001540 <main+0x2c8>)
 8001422:	f7ff fa61 	bl	80008e8 <ILI9341_DrawText>
	ILI9341_DrawText(Buffer, FONT3, 10, 50, RED, WHITE);
 8001426:	1d38      	adds	r0, r7, #4
 8001428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2332      	movs	r3, #50	; 0x32
 8001436:	220a      	movs	r2, #10
 8001438:	4941      	ldr	r1, [pc, #260]	; (8001540 <main+0x2c8>)
 800143a:	f7ff fa55 	bl	80008e8 <ILI9341_DrawText>
	ILI9341_DrawText(Buffer, FONT3, 10, 70, GREEN, WHITE);
 800143e:	1d38      	adds	r0, r7, #4
 8001440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2346      	movs	r3, #70	; 0x46
 800144e:	220a      	movs	r2, #10
 8001450:	493b      	ldr	r1, [pc, #236]	; (8001540 <main+0x2c8>)
 8001452:	f7ff fa49 	bl	80008e8 <ILI9341_DrawText>
	ILI9341_DrawText(Buffer, FONT3, 10, 90, MAROON, WHITE);
 8001456:	1d38      	adds	r0, r7, #4
 8001458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	235a      	movs	r3, #90	; 0x5a
 8001466:	220a      	movs	r2, #10
 8001468:	4935      	ldr	r1, [pc, #212]	; (8001540 <main+0x2c8>)
 800146a:	f7ff fa3d 	bl	80008e8 <ILI9341_DrawText>
	ILI9341_DrawText(Buffer, FONT3, 10, 110, WHITE, BLACK);
 800146e:	1d38      	adds	r0, r7, #4
 8001470:	2300      	movs	r3, #0
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	236e      	movs	r3, #110	; 0x6e
 800147c:	220a      	movs	r2, #10
 800147e:	4930      	ldr	r1, [pc, #192]	; (8001540 <main+0x2c8>)
 8001480:	f7ff fa32 	bl	80008e8 <ILI9341_DrawText>
	ILI9341_DrawText(Buffer, FONT3, 10, 130, RED, BLACK);
 8001484:	1d38      	adds	r0, r7, #4
 8001486:	2300      	movs	r3, #0
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2382      	movs	r3, #130	; 0x82
 8001492:	220a      	movs	r2, #10
 8001494:	492a      	ldr	r1, [pc, #168]	; (8001540 <main+0x2c8>)
 8001496:	f7ff fa27 	bl	80008e8 <ILI9341_DrawText>
HAL_Delay(500);
 800149a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800149e:	f000 fb63 	bl	8001b68 <HAL_Delay>
for (uint8_t var = 0; var < 10; ++var) {
 80014a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014a6:	3301      	adds	r3, #1
 80014a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	d99b      	bls.n	80013ec <main+0x174>
}
HAL_Delay(1000);
 80014b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b8:	f000 fb56 	bl	8001b68 <HAL_Delay>
ILI9341_FillScreen( WHITE  );
 80014bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014c0:	f7ff fd6a 	bl	8000f98 <ILI9341_FillScreen>
ILI9341_DrawVLine(160, 40, 200, RED);
 80014c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014c8:	22c8      	movs	r2, #200	; 0xc8
 80014ca:	2128      	movs	r1, #40	; 0x28
 80014cc:	20a0      	movs	r0, #160	; 0xa0
 80014ce:	f7ff fe8f 	bl	80011f0 <ILI9341_DrawVLine>
HAL_Delay(1000);
 80014d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d6:	f000 fb47 	bl	8001b68 <HAL_Delay>

ILI9341_FillScreen( WHITE  );
 80014da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014de:	f7ff fd5b 	bl	8000f98 <ILI9341_FillScreen>
ILI9341_DrawHLine(50, 120, 200, RED);
 80014e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014e6:	22c8      	movs	r2, #200	; 0xc8
 80014e8:	2178      	movs	r1, #120	; 0x78
 80014ea:	2032      	movs	r0, #50	; 0x32
 80014ec:	f7ff fe3c 	bl	8001168 <ILI9341_DrawHLine>
HAL_Delay(1000);
 80014f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f4:	f000 fb38 	bl	8001b68 <HAL_Delay>

ILI9341_FillScreen( WHITE  );
 80014f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014fc:	f7ff fd4c 	bl	8000f98 <ILI9341_FillScreen>
ILI9341_DrawHollowCircle(160, 120, 80, MAROON);
 8001500:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001504:	2250      	movs	r2, #80	; 0x50
 8001506:	2178      	movs	r1, #120	; 0x78
 8001508:	20a0      	movs	r0, #160	; 0xa0
 800150a:	f7ff f837 	bl	800057c <ILI9341_DrawHollowCircle>
HAL_Delay(1000);
 800150e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001512:	f000 fb29 	bl	8001b68 <HAL_Delay>

ILI9341_FillScreen( RED  );
 8001516:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800151a:	f7ff fd3d 	bl	8000f98 <ILI9341_FillScreen>
ILI9341_DrawFilledCircle(160, 120, 50, BLUE);
 800151e:	231f      	movs	r3, #31
 8001520:	2232      	movs	r2, #50	; 0x32
 8001522:	2178      	movs	r1, #120	; 0x78
 8001524:	20a0      	movs	r0, #160	; 0xa0
 8001526:	f7ff f8df 	bl	80006e8 <ILI9341_DrawFilledCircle>
HAL_Delay(1000);
 800152a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800152e:	f000 fb1b 	bl	8001b68 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001532:	e7fe      	b.n	8001532 <main+0x2ba>
 8001534:	08004b50 	.word	0x08004b50
 8001538:	080041d0 	.word	0x080041d0
 800153c:	080041dc 	.word	0x080041dc
 8001540:	080041ec 	.word	0x080041ec

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	; 0x50
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	2230      	movs	r2, #48	; 0x30
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f002 f9ac 	bl	80038b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <SystemClock_Config+0xcc>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <SystemClock_Config+0xcc>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <SystemClock_Config+0xcc>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <SystemClock_Config+0xd0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <SystemClock_Config+0xd0>)
 8001592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <SystemClock_Config+0xd0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ae:	2302      	movs	r3, #2
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015b8:	2304      	movs	r3, #4
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80015bc:	2354      	movs	r3, #84	; 0x54
 80015be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c0:	2302      	movs	r3, #2
 80015c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015c4:	2304      	movs	r3, #4
 80015c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 f90f 	bl	80027f0 <HAL_RCC_OscConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015d8:	f000 f8fe 	bl	80017d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015dc:	230f      	movs	r3, #15
 80015de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e0:	2302      	movs	r3, #2
 80015e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2102      	movs	r1, #2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fb71 	bl	8002ce0 <HAL_RCC_ClockConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001604:	f000 f8e8 	bl	80017d8 <Error_Handler>
  }
}
 8001608:	bf00      	nop
 800160a:	3750      	adds	r7, #80	; 0x50
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000

08001618 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_SPI1_Init+0x64>)
 800161e:	4a18      	ldr	r2, [pc, #96]	; (8001680 <MX_SPI1_Init+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_SPI1_Init+0x64>)
 8001624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001628:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_SPI1_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_SPI1_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_SPI1_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_SPI1_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_SPI1_Init+0x64>)
 8001644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001648:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_SPI1_Init+0x64>)
 800164c:	2208      	movs	r2, #8
 800164e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_SPI1_Init+0x64>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_SPI1_Init+0x64>)
 8001658:	2200      	movs	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_SPI1_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_SPI1_Init+0x64>)
 8001664:	220a      	movs	r2, #10
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_SPI1_Init+0x64>)
 800166a:	f001 fd25 	bl	80030b8 <HAL_SPI_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001674:	f000 f8b0 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000007c 	.word	0x2000007c
 8001680:	40013000 	.word	0x40013000

08001684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_DMA_Init+0x3c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <MX_DMA_Init+0x3c>)
 8001694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_DMA_Init+0x3c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	203b      	movs	r0, #59	; 0x3b
 80016ac:	f000 fb5b 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80016b0:	203b      	movs	r0, #59	; 0x3b
 80016b2:	f000 fb74 	bl	8001d9e <HAL_NVIC_EnableIRQ>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <MX_GPIO_Init+0x104>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <MX_GPIO_Init+0x104>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <MX_GPIO_Init+0x104>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <MX_GPIO_Init+0x104>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a32      	ldr	r2, [pc, #200]	; (80017c8 <MX_GPIO_Init+0x104>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <MX_GPIO_Init+0x104>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <MX_GPIO_Init+0x104>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <MX_GPIO_Init+0x104>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <MX_GPIO_Init+0x104>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <MX_GPIO_Init+0x104>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <MX_GPIO_Init+0x104>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_GPIO_Init+0x104>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	481f      	ldr	r0, [pc, #124]	; (80017cc <MX_GPIO_Init+0x108>)
 8001750:	f001 f834 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175a:	481d      	ldr	r0, [pc, #116]	; (80017d0 <MX_GPIO_Init+0x10c>)
 800175c:	f001 f82e 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2140      	movs	r1, #64	; 0x40
 8001764:	481b      	ldr	r0, [pc, #108]	; (80017d4 <MX_GPIO_Init+0x110>)
 8001766:	f001 f829 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4812      	ldr	r0, [pc, #72]	; (80017cc <MX_GPIO_Init+0x108>)
 8001782:	f000 fe97 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <MX_GPIO_Init+0x10c>)
 80017a0:	f000 fe88 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017a4:	2340      	movs	r3, #64	; 0x40
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <MX_GPIO_Init+0x110>)
 80017bc:	f000 fe7a 	bl	80024b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40020400 	.word	0x40020400

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <Error_Handler+0x8>
	...

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <HAL_MspInit+0x4c>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x4c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a34      	ldr	r2, [pc, #208]	; (8001924 <HAL_SPI_MspInit+0xf0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d162      	bne.n	800191c <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b33      	ldr	r3, [pc, #204]	; (8001928 <HAL_SPI_MspInit+0xf4>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a32      	ldr	r2, [pc, #200]	; (8001928 <HAL_SPI_MspInit+0xf4>)
 8001860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_SPI_MspInit+0xf4>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <HAL_SPI_MspInit+0xf4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <HAL_SPI_MspInit+0xf4>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_SPI_MspInit+0xf4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800188e:	23a0      	movs	r3, #160	; 0xa0
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189e:	2305      	movs	r3, #5
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4820      	ldr	r0, [pc, #128]	; (800192c <HAL_SPI_MspInit+0xf8>)
 80018aa:	f000 fe03 	bl	80024b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018b0:	4a20      	ldr	r2, [pc, #128]	; (8001934 <HAL_SPI_MspInit+0x100>)
 80018b2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018b6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80018ba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018be:	2240      	movs	r2, #64	; 0x40
 80018c0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018ea:	2204      	movs	r2, #4
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018f0:	2203      	movs	r2, #3
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 8001902:	f000 fa67 	bl	8001dd4 <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 800190c:	f7ff ff64 	bl	80017d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 8001914:	649a      	str	r2, [r3, #72]	; 0x48
 8001916:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_SPI_MspInit+0xfc>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40013000 	.word	0x40013000
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000
 8001930:	200000d4 	.word	0x200000d4
 8001934:	40026458 	.word	0x40026458

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800193c:	e7fe      	b.n	800193c <NMI_Handler+0x4>

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 f8d0 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA2_Stream3_IRQHandler+0x10>)
 8001992:	f000 fb25 	bl	8001fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200000d4 	.word	0x200000d4

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f001 ff76 	bl	80038c0 <__errno>
 80019d4:	4603      	mov	r3, r0
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <_sbrk+0x64>)
 80019f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20018000 	.word	0x20018000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	20000134 	.word	0x20000134
 8001a08:	20000288 	.word	0x20000288

08001a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <SystemInit+0x20>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <SystemInit+0x20>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a34:	480d      	ldr	r0, [pc, #52]	; (8001a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a36:	490e      	ldr	r1, [pc, #56]	; (8001a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a4c:	4c0b      	ldr	r4, [pc, #44]	; (8001a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a5a:	f7ff ffd7 	bl	8001a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f001 ff35 	bl	80038cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a62:	f7ff fc09 	bl	8001278 <main>
  bx  lr    
 8001a66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001a74:	08005cf0 	.word	0x08005cf0
  ldr r2, =_sbss
 8001a78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a7c:	20000284 	.word	0x20000284

08001a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <HAL_Init+0x40>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_Init+0x40>)
 8001a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_Init+0x40>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f000 f94f 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab2:	200f      	movs	r0, #15
 8001ab4:	f000 f808 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab8:	f7ff fe94 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_InitTick+0x54>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x58>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f967 	bl	8001dba <HAL_SYSTICK_Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00e      	b.n	8001b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d80a      	bhi.n	8001b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f000 f92f 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_InitTick+0x5c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	2000000c 	.word	0x2000000c
 8001b24:	20000008 	.word	0x20000008

08001b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	20000138 	.word	0x20000138

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000138 	.word	0x20000138

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff ffee 	bl	8001b50 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffde 	bl	8001b50 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000000c 	.word	0x2000000c

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff8e 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff29 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff3e 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff8e 	bl	8001ca4 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5d 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff31 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff feb6 	bl	8001b50 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e099      	b.n	8001f24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e10:	e00f      	b.n	8001e32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e12:	f7ff fe9d 	bl	8001b50 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d908      	bls.n	8001e32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e078      	b.n	8001f24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e8      	bne.n	8001e12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_DMA_Init+0x158>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d107      	bne.n	8001e9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	4313      	orrs	r3, r2
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f023 0307 	bic.w	r3, r3, #7
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d117      	bne.n	8001ef6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00e      	beq.n	8001ef6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fa6f 	bl	80023bc <DMA_CheckFifoParam>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2240      	movs	r2, #64	; 0x40
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e016      	b.n	8001f24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fa26 	bl	8002350 <DMA_CalcBaseAndBitshift>
 8001f04:	4603      	mov	r3, r0
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	223f      	movs	r2, #63	; 0x3f
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	f010803f 	.word	0xf010803f

08001f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_DMA_Start_IT+0x26>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e040      	b.n	8001fd8 <HAL_DMA_Start_IT+0xa8>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d12f      	bne.n	8001fca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f9b8 	bl	80022f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	223f      	movs	r2, #63	; 0x3f
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0216 	orr.w	r2, r2, #22
 8001f9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0208 	orr.w	r2, r2, #8
 8001fb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e005      	b.n	8001fd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fec:	4b8e      	ldr	r3, [pc, #568]	; (8002228 <HAL_DMA_IRQHandler+0x248>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a8e      	ldr	r2, [pc, #568]	; (800222c <HAL_DMA_IRQHandler+0x24c>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0a9b      	lsrs	r3, r3, #10
 8001ff8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	2208      	movs	r2, #8
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d01a      	beq.n	800204c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0204 	bic.w	r2, r2, #4
 8002032:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2208      	movs	r2, #8
 800203a:	409a      	lsls	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2201      	movs	r2, #1
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d012      	beq.n	8002082 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2201      	movs	r2, #1
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	f043 0202 	orr.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	2204      	movs	r2, #4
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2204      	movs	r2, #4
 80020a6:	409a      	lsls	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f043 0204 	orr.w	r2, r3, #4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2210      	movs	r2, #16
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d043      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d03c      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2210      	movs	r2, #16
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d018      	beq.n	8002122 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d108      	bne.n	8002110 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d024      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
 800210e:	e01f      	b.n	8002150 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01b      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
 8002120:	e016      	b.n	8002150 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0208 	bic.w	r2, r2, #8
 800213e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2220      	movs	r2, #32
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 808f 	beq.w	8002280 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8087 	beq.w	8002280 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	2220      	movs	r2, #32
 8002178:	409a      	lsls	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b05      	cmp	r3, #5
 8002188:	d136      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0216 	bic.w	r2, r2, #22
 8002198:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <HAL_DMA_IRQHandler+0x1da>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0208 	bic.w	r2, r2, #8
 80021c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	223f      	movs	r2, #63	; 0x3f
 80021d0:	409a      	lsls	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d07e      	beq.n	80022ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
        }
        return;
 80021f6:	e079      	b.n	80022ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01d      	beq.n	8002242 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10d      	bne.n	8002230 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	2b00      	cmp	r3, #0
 800221a:	d031      	beq.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
 8002224:	e02c      	b.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
 8002226:	bf00      	nop
 8002228:	20000004 	.word	0x20000004
 800222c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
 8002240:	e01e      	b.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10f      	bne.n	8002270 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0210 	bic.w	r2, r2, #16
 800225e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	2b00      	cmp	r3, #0
 8002286:	d032      	beq.n	80022ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d022      	beq.n	80022da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2205      	movs	r2, #5
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	3301      	adds	r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d307      	bcc.n	80022c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f2      	bne.n	80022ac <HAL_DMA_IRQHandler+0x2cc>
 80022c6:	e000      	b.n	80022ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
 80022ea:	e000      	b.n	80022ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80022ec:	bf00      	nop
    }
  }
}
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002310:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d108      	bne.n	8002334 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002332:	e007      	b.n	8002344 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	60da      	str	r2, [r3, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3b10      	subs	r3, #16
 8002360:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800236a:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <DMA_CalcBaseAndBitshift+0x68>)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d909      	bls.n	8002392 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	1d1a      	adds	r2, r3, #4
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	659a      	str	r2, [r3, #88]	; 0x58
 8002390:	e007      	b.n	80023a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	aaaaaaab 	.word	0xaaaaaaab
 80023b8:	08005ca4 	.word	0x08005ca4

080023bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d11f      	bne.n	8002416 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d856      	bhi.n	800248a <DMA_CheckFifoParam+0xce>
 80023dc:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <DMA_CheckFifoParam+0x28>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	08002407 	.word	0x08002407
 80023ec:	080023f5 	.word	0x080023f5
 80023f0:	0800248b 	.word	0x0800248b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d046      	beq.n	800248e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002404:	e043      	b.n	800248e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800240e:	d140      	bne.n	8002492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002414:	e03d      	b.n	8002492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241e:	d121      	bne.n	8002464 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d837      	bhi.n	8002496 <DMA_CheckFifoParam+0xda>
 8002426:	a201      	add	r2, pc, #4	; (adr r2, 800242c <DMA_CheckFifoParam+0x70>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	0800243d 	.word	0x0800243d
 8002430:	08002443 	.word	0x08002443
 8002434:	0800243d 	.word	0x0800243d
 8002438:	08002455 	.word	0x08002455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      break;
 8002440:	e030      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d025      	beq.n	800249a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002452:	e022      	b.n	800249a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800245c:	d11f      	bne.n	800249e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002462:	e01c      	b.n	800249e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d903      	bls.n	8002472 <DMA_CheckFifoParam+0xb6>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d003      	beq.n	8002478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002470:	e018      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      break;
 8002476:	e015      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00e      	beq.n	80024a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      break;
 8002488:	e00b      	b.n	80024a2 <DMA_CheckFifoParam+0xe6>
      break;
 800248a:	bf00      	nop
 800248c:	e00a      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
 8002490:	e008      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002492:	bf00      	nop
 8002494:	e006      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e004      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 800249a:	bf00      	nop
 800249c:	e002      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800249e:	bf00      	nop
 80024a0:	e000      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 80024a2:	bf00      	nop
    }
  } 
  
  return status; 
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e159      	b.n	8002784 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f040 8148 	bne.w	800277e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d005      	beq.n	8002506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002502:	2b02      	cmp	r3, #2
 8002504:	d130      	bne.n	8002568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0201 	and.w	r2, r3, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b03      	cmp	r3, #3
 8002572:	d017      	beq.n	80025a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d123      	bne.n	80025f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80a2 	beq.w	800277e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b57      	ldr	r3, [pc, #348]	; (800279c <HAL_GPIO_Init+0x2e8>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a56      	ldr	r2, [pc, #344]	; (800279c <HAL_GPIO_Init+0x2e8>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_GPIO_Init+0x2e8>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002656:	4a52      	ldr	r2, [pc, #328]	; (80027a0 <HAL_GPIO_Init+0x2ec>)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a49      	ldr	r2, [pc, #292]	; (80027a4 <HAL_GPIO_Init+0x2f0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x202>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a48      	ldr	r2, [pc, #288]	; (80027a8 <HAL_GPIO_Init+0x2f4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x1fe>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a47      	ldr	r2, [pc, #284]	; (80027ac <HAL_GPIO_Init+0x2f8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x1fa>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a46      	ldr	r2, [pc, #280]	; (80027b0 <HAL_GPIO_Init+0x2fc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x1f6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a45      	ldr	r2, [pc, #276]	; (80027b4 <HAL_GPIO_Init+0x300>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x1f2>
 80026a2:	2304      	movs	r3, #4
 80026a4:	e008      	b.n	80026b8 <HAL_GPIO_Init+0x204>
 80026a6:	2307      	movs	r3, #7
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x204>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x204>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x204>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x204>
 80026b6:	2300      	movs	r3, #0
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c8:	4935      	ldr	r1, [pc, #212]	; (80027a0 <HAL_GPIO_Init+0x2ec>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d6:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <HAL_GPIO_Init+0x304>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fa:	4a2f      	ldr	r2, [pc, #188]	; (80027b8 <HAL_GPIO_Init+0x304>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <HAL_GPIO_Init+0x304>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002724:	4a24      	ldr	r2, [pc, #144]	; (80027b8 <HAL_GPIO_Init+0x304>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272a:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <HAL_GPIO_Init+0x304>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274e:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <HAL_GPIO_Init+0x304>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002754:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <HAL_GPIO_Init+0x304>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002778:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <HAL_GPIO_Init+0x304>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	f67f aea2 	bls.w	80024d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40013c00 	.word	0x40013c00

080027bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	807b      	strh	r3, [r7, #2]
 80027c8:	4613      	mov	r3, r2
 80027ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027cc:	787b      	ldrb	r3, [r7, #1]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027d8:	e003      	b.n	80027e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027da:	887b      	ldrh	r3, [r7, #2]
 80027dc:	041a      	lsls	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	619a      	str	r2, [r3, #24]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e267      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d075      	beq.n	80028fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280e:	4b88      	ldr	r3, [pc, #544]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d00c      	beq.n	8002834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4b85      	ldr	r3, [pc, #532]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002822:	2b08      	cmp	r3, #8
 8002824:	d112      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002826:	4b82      	ldr	r3, [pc, #520]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002832:	d10b      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	4b7e      	ldr	r3, [pc, #504]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d05b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x108>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d157      	bne.n	80028f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e242      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x74>
 8002856:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a75      	ldr	r2, [pc, #468]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e01d      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x98>
 800286e:	4b70      	ldr	r3, [pc, #448]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6f      	ldr	r2, [pc, #444]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6c      	ldr	r2, [pc, #432]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002888:	4b69      	ldr	r3, [pc, #420]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a68      	ldr	r2, [pc, #416]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b66      	ldr	r3, [pc, #408]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a65      	ldr	r2, [pc, #404]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff f952 	bl	8001b50 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff f94e 	bl	8001b50 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e207      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xc0>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7ff f93e 	bl	8001b50 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d8:	f7ff f93a 	bl	8001b50 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1f3      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	4b51      	ldr	r3, [pc, #324]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0xe8>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d063      	beq.n	80029ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002906:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291a:	2b08      	cmp	r3, #8
 800291c:	d11c      	bne.n	8002958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291e:	4b44      	ldr	r3, [pc, #272]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d116      	bne.n	8002958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_RCC_OscConfig+0x152>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e1c7      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4937      	ldr	r1, [pc, #220]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	e03a      	b.n	80029ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002960:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_RCC_OscConfig+0x244>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7ff f8f3 	bl	8001b50 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296e:	f7ff f8ef 	bl	8001b50 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1a8      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4925      	ldr	r1, [pc, #148]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <HAL_RCC_OscConfig+0x244>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7ff f8d2 	bl	8001b50 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b0:	f7ff f8ce 	bl	8001b50 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e187      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d036      	beq.n	8002a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d016      	beq.n	8002a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_RCC_OscConfig+0x248>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7ff f8b2 	bl	8001b50 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f0:	f7ff f8ae 	bl	8001b50 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e167      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x200>
 8002a0e:	e01b      	b.n	8002a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCC_OscConfig+0x248>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7ff f89b 	bl	8001b50 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	e00e      	b.n	8002a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1e:	f7ff f897 	bl	8001b50 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d907      	bls.n	8002a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e150      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
 8002a30:	40023800 	.word	0x40023800
 8002a34:	42470000 	.word	0x42470000
 8002a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3c:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ea      	bne.n	8002a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8097 	beq.w	8002b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5a:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	4b7d      	ldr	r3, [pc, #500]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a7c      	ldr	r2, [pc, #496]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b7a      	ldr	r3, [pc, #488]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b77      	ldr	r3, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d118      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a92:	4b74      	ldr	r3, [pc, #464]	; (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a73      	ldr	r2, [pc, #460]	; (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9e:	f7ff f857 	bl	8001b50 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7ff f853 	bl	8001b50 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e10c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x2ea>
 8002acc:	4b64      	ldr	r3, [pc, #400]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a63      	ldr	r2, [pc, #396]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	e01c      	b.n	8002b14 <HAL_RCC_OscConfig+0x324>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x30c>
 8002ae2:	4b5f      	ldr	r3, [pc, #380]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a5e      	ldr	r2, [pc, #376]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
 8002aee:	4b5c      	ldr	r3, [pc, #368]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a5b      	ldr	r2, [pc, #364]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0x324>
 8002afc:	4b58      	ldr	r3, [pc, #352]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a57      	ldr	r2, [pc, #348]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
 8002b08:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4a54      	ldr	r2, [pc, #336]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f023 0304 	bic.w	r3, r3, #4
 8002b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7ff f818 	bl	8001b50 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7ff f814 	bl	8001b50 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0cb      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0ee      	beq.n	8002b24 <HAL_RCC_OscConfig+0x334>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7ff f802 	bl	8001b50 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b50:	f7fe fffe 	bl	8001b50 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0b5      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ee      	bne.n	8002b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b78:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a38      	ldr	r2, [pc, #224]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80a1 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b8e:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d05c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d141      	bne.n	8002c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe ffd2 	bl	8001b50 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe ffce 	bl	8001b50 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e087      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	491b      	ldr	r1, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe ffa7 	bl	8001b50 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fe ffa3 	bl	8001b50 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e05c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x416>
 8002c24:	e054      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe ff90 	bl	8001b50 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe ff8c 	bl	8001b50 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e045      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x444>
 8002c52:	e03d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e038      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000
 8002c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_RCC_OscConfig+0x4ec>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d028      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d121      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d11a      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d111      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0cc      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b68      	ldr	r3, [pc, #416]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d90c      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b8      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	494d      	ldr	r1, [pc, #308]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d044      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d119      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e067      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dbe:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4934      	ldr	r1, [pc, #208]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd0:	f7fe febe 	bl	8001b50 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fe feba 	bl	8001b50 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e04f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 020c 	and.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d1eb      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d20c      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e032      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4916      	ldr	r1, [pc, #88]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	490e      	ldr	r1, [pc, #56]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e66:	f000 f821 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	490a      	ldr	r1, [pc, #40]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe fe1e 	bl	8001ac8 <HAL_InitTick>

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023c00 	.word	0x40023c00
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	08005c94 	.word	0x08005c94
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	20000008 	.word	0x20000008

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb0:	b094      	sub	sp, #80	; 0x50
 8002eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb8:	2300      	movs	r3, #0
 8002eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec4:	4b79      	ldr	r3, [pc, #484]	; (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d00d      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x40>
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	f200 80e1 	bhi.w	8003098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ede:	e0db      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b73      	ldr	r3, [pc, #460]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ee2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ee4:	e0db      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee6:	4b73      	ldr	r3, [pc, #460]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ee8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eea:	e0d8      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f02:	4b6a      	ldr	r3, [pc, #424]	; (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	2200      	movs	r2, #0
 8002f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f14:	633b      	str	r3, [r7, #48]	; 0x30
 8002f16:	2300      	movs	r3, #0
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f1e:	4622      	mov	r2, r4
 8002f20:	462b      	mov	r3, r5
 8002f22:	f04f 0000 	mov.w	r0, #0
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	0159      	lsls	r1, r3, #5
 8002f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f30:	0150      	lsls	r0, r2, #5
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4621      	mov	r1, r4
 8002f38:	1a51      	subs	r1, r2, r1
 8002f3a:	6139      	str	r1, [r7, #16]
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f50:	4659      	mov	r1, fp
 8002f52:	018b      	lsls	r3, r1, #6
 8002f54:	4651      	mov	r1, sl
 8002f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5a:	4651      	mov	r1, sl
 8002f5c:	018a      	lsls	r2, r1, #6
 8002f5e:	4651      	mov	r1, sl
 8002f60:	ebb2 0801 	subs.w	r8, r2, r1
 8002f64:	4659      	mov	r1, fp
 8002f66:	eb63 0901 	sbc.w	r9, r3, r1
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7e:	4690      	mov	r8, r2
 8002f80:	4699      	mov	r9, r3
 8002f82:	4623      	mov	r3, r4
 8002f84:	eb18 0303 	adds.w	r3, r8, r3
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	eb49 0303 	adc.w	r3, r9, r3
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	024b      	lsls	r3, r1, #9
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fa8:	4621      	mov	r1, r4
 8002faa:	024a      	lsls	r2, r1, #9
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fbc:	f7fd f960 	bl	8000280 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc8:	e058      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b38      	ldr	r3, [pc, #224]	; (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fda:	623b      	str	r3, [r7, #32]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	f04f 0000 	mov.w	r0, #0
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	0159      	lsls	r1, r3, #5
 8002ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff6:	0150      	lsls	r0, r2, #5
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003002:	4649      	mov	r1, r9
 8003004:	eb63 0b01 	sbc.w	fp, r3, r1
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800301c:	ebb2 040a 	subs.w	r4, r2, sl
 8003020:	eb63 050b 	sbc.w	r5, r3, fp
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	00eb      	lsls	r3, r5, #3
 800302e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003032:	00e2      	lsls	r2, r4, #3
 8003034:	4614      	mov	r4, r2
 8003036:	461d      	mov	r5, r3
 8003038:	4643      	mov	r3, r8
 800303a:	18e3      	adds	r3, r4, r3
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	464b      	mov	r3, r9
 8003040:	eb45 0303 	adc.w	r3, r5, r3
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003052:	4629      	mov	r1, r5
 8003054:	028b      	lsls	r3, r1, #10
 8003056:	4621      	mov	r1, r4
 8003058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800305c:	4621      	mov	r1, r4
 800305e:	028a      	lsls	r2, r1, #10
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003066:	2200      	movs	r2, #0
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	61fa      	str	r2, [r7, #28]
 800306c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003070:	f7fd f906 	bl	8000280 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800308c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800308e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003096:	e002      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800309a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800309c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3750      	adds	r7, #80	; 0x50
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200

080030b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e07b      	b.n	80031c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d108      	bne.n	80030e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030da:	d009      	beq.n	80030f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	61da      	str	r2, [r3, #28]
 80030e2:	e005      	b.n	80030f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fb92 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003126:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	ea42 0103 	orr.w	r1, r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	f003 0104 	and.w	r1, r3, #4
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0210 	and.w	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b088      	sub	sp, #32
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_SPI_Transmit+0x22>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e126      	b.n	800343a <HAL_SPI_Transmit+0x270>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f4:	f7fe fcac 	bl	8001b50 <HAL_GetTick>
 80031f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d002      	beq.n	8003210 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800320a:	2302      	movs	r3, #2
 800320c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800320e:	e10b      	b.n	8003428 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_SPI_Transmit+0x52>
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003220:	e102      	b.n	8003428 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2203      	movs	r2, #3
 8003226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	88fa      	ldrh	r2, [r7, #6]
 800323a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003268:	d10f      	bne.n	800328a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003288:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d007      	beq.n	80032a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b0:	d14b      	bne.n	800334a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_SPI_Transmit+0xf6>
 80032ba:	8afb      	ldrh	r3, [r7, #22]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d13e      	bne.n	800333e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	881a      	ldrh	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	1c9a      	adds	r2, r3, #2
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032e4:	e02b      	b.n	800333e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d112      	bne.n	800331a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	881a      	ldrh	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	1c9a      	adds	r2, r3, #2
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	86da      	strh	r2, [r3, #54]	; 0x36
 8003318:	e011      	b.n	800333e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800331a:	f7fe fc19 	bl	8001b50 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d803      	bhi.n	8003332 <HAL_SPI_Transmit+0x168>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d102      	bne.n	8003338 <HAL_SPI_Transmit+0x16e>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800333c:	e074      	b.n	8003428 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ce      	bne.n	80032e6 <HAL_SPI_Transmit+0x11c>
 8003348:	e04c      	b.n	80033e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_SPI_Transmit+0x18e>
 8003352:	8afb      	ldrh	r3, [r7, #22]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d140      	bne.n	80033da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	330c      	adds	r3, #12
 8003362:	7812      	ldrb	r2, [r2, #0]
 8003364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800337e:	e02c      	b.n	80033da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b02      	cmp	r3, #2
 800338c:	d113      	bne.n	80033b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80033b4:	e011      	b.n	80033da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033b6:	f7fe fbcb 	bl	8001b50 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d803      	bhi.n	80033ce <HAL_SPI_Transmit+0x204>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d102      	bne.n	80033d4 <HAL_SPI_Transmit+0x20a>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033d8:	e026      	b.n	8003428 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1cd      	bne.n	8003380 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	6839      	ldr	r1, [r7, #0]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f9ff 	bl	80037ec <SPI_EndRxTxTransaction>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e000      	b.n	8003428 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003426:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003438:	7ffb      	ldrb	r3, [r7, #31]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_SPI_Transmit_DMA+0x20>
 8003460:	2302      	movs	r3, #2
 8003462:	e09b      	b.n	800359c <HAL_SPI_Transmit_DMA+0x158>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d002      	beq.n	800347e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003478:	2302      	movs	r3, #2
 800347a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800347c:	e089      	b.n	8003592 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_Transmit_DMA+0x46>
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800348e:	e080      	b.n	8003592 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2203      	movs	r2, #3
 8003494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d6:	d10f      	bne.n	80034f8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fc:	4a29      	ldr	r2, [pc, #164]	; (80035a4 <HAL_SPI_Transmit_DMA+0x160>)
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003504:	4a28      	ldr	r2, [pc, #160]	; (80035a8 <HAL_SPI_Transmit_DMA+0x164>)
 8003506:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	4a27      	ldr	r2, [pc, #156]	; (80035ac <HAL_SPI_Transmit_DMA+0x168>)
 800350e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003514:	2200      	movs	r2, #0
 8003516:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	4619      	mov	r1, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800352e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003530:	f7fe fcfe 	bl	8001f30 <HAL_DMA_Start_IT>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353e:	f043 0210 	orr.w	r2, r3, #16
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003552:	e01e      	b.n	8003592 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d007      	beq.n	8003572 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0220 	orr.w	r2, r2, #32
 8003580:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0202 	orr.w	r2, r2, #2
 8003590:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800359a:	7dfb      	ldrb	r3, [r7, #23]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	08003681 	.word	0x08003681
 80035a8:	080035d9 	.word	0x080035d9
 80035ac:	0800369d 	.word	0x0800369d

080035b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035e6:	f7fe fab3 	bl	8001b50 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fa:	d03b      	beq.n	8003674 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0220 	bic.w	r2, r2, #32
 800360a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0202 	bic.w	r2, r2, #2
 800361a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	2164      	movs	r1, #100	; 0x64
 8003620:	6978      	ldr	r0, [r7, #20]
 8003622:	f000 f8e3 	bl	80037ec <SPI_EndRxTxTransaction>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2200      	movs	r2, #0
 800365a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800366c:	6978      	ldr	r0, [r7, #20]
 800366e:	f7ff ffa9 	bl	80035c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003672:	e002      	b.n	800367a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003674:	6978      	ldr	r0, [r7, #20]
 8003676:	f7fd f981 	bl	800097c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff ff8e 	bl	80035b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0203 	bic.w	r2, r2, #3
 80036b8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f043 0210 	orr.w	r2, r3, #16
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff ff78 	bl	80035c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036ec:	f7fe fa30 	bl	8001b50 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4413      	add	r3, r2
 80036fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036fc:	f7fe fa28 	bl	8001b50 <HAL_GetTick>
 8003700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	015b      	lsls	r3, r3, #5
 8003708:	0d1b      	lsrs	r3, r3, #20
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003712:	e054      	b.n	80037be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d050      	beq.n	80037be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800371c:	f7fe fa18 	bl	8001b50 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	429a      	cmp	r2, r3
 800372a:	d902      	bls.n	8003732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d13d      	bne.n	80037ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800374a:	d111      	bne.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003754:	d004      	beq.n	8003760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375e:	d107      	bne.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800376e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003778:	d10f      	bne.n	800379a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e017      	b.n	80037de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4013      	ands	r3, r2
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	bf0c      	ite	eq
 80037ce:	2301      	moveq	r3, #1
 80037d0:	2300      	movne	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d19b      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000004 	.word	0x20000004

080037ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <SPI_EndRxTxTransaction+0x7c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1b      	ldr	r2, [pc, #108]	; (800386c <SPI_EndRxTxTransaction+0x80>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	0d5b      	lsrs	r3, r3, #21
 8003804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003808:	fb02 f303 	mul.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003816:	d112      	bne.n	800383e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2200      	movs	r2, #0
 8003820:	2180      	movs	r1, #128	; 0x80
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff ff5a 	bl	80036dc <SPI_WaitFlagStateUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d016      	beq.n	800385c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e00f      	b.n	800385e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	3b01      	subs	r3, #1
 8003848:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b80      	cmp	r3, #128	; 0x80
 8003856:	d0f2      	beq.n	800383e <SPI_EndRxTxTransaction+0x52>
 8003858:	e000      	b.n	800385c <SPI_EndRxTxTransaction+0x70>
        break;
 800385a:	bf00      	nop
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000004 	.word	0x20000004
 800386c:	165e9f81 	.word	0x165e9f81

08003870 <siprintf>:
 8003870:	b40e      	push	{r1, r2, r3}
 8003872:	b500      	push	{lr}
 8003874:	b09c      	sub	sp, #112	; 0x70
 8003876:	ab1d      	add	r3, sp, #116	; 0x74
 8003878:	9002      	str	r0, [sp, #8]
 800387a:	9006      	str	r0, [sp, #24]
 800387c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003880:	4809      	ldr	r0, [pc, #36]	; (80038a8 <siprintf+0x38>)
 8003882:	9107      	str	r1, [sp, #28]
 8003884:	9104      	str	r1, [sp, #16]
 8003886:	4909      	ldr	r1, [pc, #36]	; (80038ac <siprintf+0x3c>)
 8003888:	f853 2b04 	ldr.w	r2, [r3], #4
 800388c:	9105      	str	r1, [sp, #20]
 800388e:	6800      	ldr	r0, [r0, #0]
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	a902      	add	r1, sp, #8
 8003894:	f000 f992 	bl	8003bbc <_svfiprintf_r>
 8003898:	9b02      	ldr	r3, [sp, #8]
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	b01c      	add	sp, #112	; 0x70
 80038a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038a4:	b003      	add	sp, #12
 80038a6:	4770      	bx	lr
 80038a8:	2000005c 	.word	0x2000005c
 80038ac:	ffff0208 	.word	0xffff0208

080038b0 <memset>:
 80038b0:	4402      	add	r2, r0
 80038b2:	4603      	mov	r3, r0
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d100      	bne.n	80038ba <memset+0xa>
 80038b8:	4770      	bx	lr
 80038ba:	f803 1b01 	strb.w	r1, [r3], #1
 80038be:	e7f9      	b.n	80038b4 <memset+0x4>

080038c0 <__errno>:
 80038c0:	4b01      	ldr	r3, [pc, #4]	; (80038c8 <__errno+0x8>)
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	2000005c 	.word	0x2000005c

080038cc <__libc_init_array>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4d0d      	ldr	r5, [pc, #52]	; (8003904 <__libc_init_array+0x38>)
 80038d0:	4c0d      	ldr	r4, [pc, #52]	; (8003908 <__libc_init_array+0x3c>)
 80038d2:	1b64      	subs	r4, r4, r5
 80038d4:	10a4      	asrs	r4, r4, #2
 80038d6:	2600      	movs	r6, #0
 80038d8:	42a6      	cmp	r6, r4
 80038da:	d109      	bne.n	80038f0 <__libc_init_array+0x24>
 80038dc:	4d0b      	ldr	r5, [pc, #44]	; (800390c <__libc_init_array+0x40>)
 80038de:	4c0c      	ldr	r4, [pc, #48]	; (8003910 <__libc_init_array+0x44>)
 80038e0:	f000 fc6a 	bl	80041b8 <_init>
 80038e4:	1b64      	subs	r4, r4, r5
 80038e6:	10a4      	asrs	r4, r4, #2
 80038e8:	2600      	movs	r6, #0
 80038ea:	42a6      	cmp	r6, r4
 80038ec:	d105      	bne.n	80038fa <__libc_init_array+0x2e>
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f4:	4798      	blx	r3
 80038f6:	3601      	adds	r6, #1
 80038f8:	e7ee      	b.n	80038d8 <__libc_init_array+0xc>
 80038fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fe:	4798      	blx	r3
 8003900:	3601      	adds	r6, #1
 8003902:	e7f2      	b.n	80038ea <__libc_init_array+0x1e>
 8003904:	08005ce8 	.word	0x08005ce8
 8003908:	08005ce8 	.word	0x08005ce8
 800390c:	08005ce8 	.word	0x08005ce8
 8003910:	08005cec 	.word	0x08005cec

08003914 <__retarget_lock_acquire_recursive>:
 8003914:	4770      	bx	lr

08003916 <__retarget_lock_release_recursive>:
 8003916:	4770      	bx	lr

08003918 <_free_r>:
 8003918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800391a:	2900      	cmp	r1, #0
 800391c:	d044      	beq.n	80039a8 <_free_r+0x90>
 800391e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003922:	9001      	str	r0, [sp, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f1a1 0404 	sub.w	r4, r1, #4
 800392a:	bfb8      	it	lt
 800392c:	18e4      	addlt	r4, r4, r3
 800392e:	f000 f8df 	bl	8003af0 <__malloc_lock>
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <_free_r+0x94>)
 8003934:	9801      	ldr	r0, [sp, #4]
 8003936:	6813      	ldr	r3, [r2, #0]
 8003938:	b933      	cbnz	r3, 8003948 <_free_r+0x30>
 800393a:	6063      	str	r3, [r4, #4]
 800393c:	6014      	str	r4, [r2, #0]
 800393e:	b003      	add	sp, #12
 8003940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003944:	f000 b8da 	b.w	8003afc <__malloc_unlock>
 8003948:	42a3      	cmp	r3, r4
 800394a:	d908      	bls.n	800395e <_free_r+0x46>
 800394c:	6825      	ldr	r5, [r4, #0]
 800394e:	1961      	adds	r1, r4, r5
 8003950:	428b      	cmp	r3, r1
 8003952:	bf01      	itttt	eq
 8003954:	6819      	ldreq	r1, [r3, #0]
 8003956:	685b      	ldreq	r3, [r3, #4]
 8003958:	1949      	addeq	r1, r1, r5
 800395a:	6021      	streq	r1, [r4, #0]
 800395c:	e7ed      	b.n	800393a <_free_r+0x22>
 800395e:	461a      	mov	r2, r3
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	b10b      	cbz	r3, 8003968 <_free_r+0x50>
 8003964:	42a3      	cmp	r3, r4
 8003966:	d9fa      	bls.n	800395e <_free_r+0x46>
 8003968:	6811      	ldr	r1, [r2, #0]
 800396a:	1855      	adds	r5, r2, r1
 800396c:	42a5      	cmp	r5, r4
 800396e:	d10b      	bne.n	8003988 <_free_r+0x70>
 8003970:	6824      	ldr	r4, [r4, #0]
 8003972:	4421      	add	r1, r4
 8003974:	1854      	adds	r4, r2, r1
 8003976:	42a3      	cmp	r3, r4
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	d1e0      	bne.n	800393e <_free_r+0x26>
 800397c:	681c      	ldr	r4, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	6053      	str	r3, [r2, #4]
 8003982:	440c      	add	r4, r1
 8003984:	6014      	str	r4, [r2, #0]
 8003986:	e7da      	b.n	800393e <_free_r+0x26>
 8003988:	d902      	bls.n	8003990 <_free_r+0x78>
 800398a:	230c      	movs	r3, #12
 800398c:	6003      	str	r3, [r0, #0]
 800398e:	e7d6      	b.n	800393e <_free_r+0x26>
 8003990:	6825      	ldr	r5, [r4, #0]
 8003992:	1961      	adds	r1, r4, r5
 8003994:	428b      	cmp	r3, r1
 8003996:	bf04      	itt	eq
 8003998:	6819      	ldreq	r1, [r3, #0]
 800399a:	685b      	ldreq	r3, [r3, #4]
 800399c:	6063      	str	r3, [r4, #4]
 800399e:	bf04      	itt	eq
 80039a0:	1949      	addeq	r1, r1, r5
 80039a2:	6021      	streq	r1, [r4, #0]
 80039a4:	6054      	str	r4, [r2, #4]
 80039a6:	e7ca      	b.n	800393e <_free_r+0x26>
 80039a8:	b003      	add	sp, #12
 80039aa:	bd30      	pop	{r4, r5, pc}
 80039ac:	2000027c 	.word	0x2000027c

080039b0 <sbrk_aligned>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	4e0e      	ldr	r6, [pc, #56]	; (80039ec <sbrk_aligned+0x3c>)
 80039b4:	460c      	mov	r4, r1
 80039b6:	6831      	ldr	r1, [r6, #0]
 80039b8:	4605      	mov	r5, r0
 80039ba:	b911      	cbnz	r1, 80039c2 <sbrk_aligned+0x12>
 80039bc:	f000 fba6 	bl	800410c <_sbrk_r>
 80039c0:	6030      	str	r0, [r6, #0]
 80039c2:	4621      	mov	r1, r4
 80039c4:	4628      	mov	r0, r5
 80039c6:	f000 fba1 	bl	800410c <_sbrk_r>
 80039ca:	1c43      	adds	r3, r0, #1
 80039cc:	d00a      	beq.n	80039e4 <sbrk_aligned+0x34>
 80039ce:	1cc4      	adds	r4, r0, #3
 80039d0:	f024 0403 	bic.w	r4, r4, #3
 80039d4:	42a0      	cmp	r0, r4
 80039d6:	d007      	beq.n	80039e8 <sbrk_aligned+0x38>
 80039d8:	1a21      	subs	r1, r4, r0
 80039da:	4628      	mov	r0, r5
 80039dc:	f000 fb96 	bl	800410c <_sbrk_r>
 80039e0:	3001      	adds	r0, #1
 80039e2:	d101      	bne.n	80039e8 <sbrk_aligned+0x38>
 80039e4:	f04f 34ff 	mov.w	r4, #4294967295
 80039e8:	4620      	mov	r0, r4
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	20000280 	.word	0x20000280

080039f0 <_malloc_r>:
 80039f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f4:	1ccd      	adds	r5, r1, #3
 80039f6:	f025 0503 	bic.w	r5, r5, #3
 80039fa:	3508      	adds	r5, #8
 80039fc:	2d0c      	cmp	r5, #12
 80039fe:	bf38      	it	cc
 8003a00:	250c      	movcc	r5, #12
 8003a02:	2d00      	cmp	r5, #0
 8003a04:	4607      	mov	r7, r0
 8003a06:	db01      	blt.n	8003a0c <_malloc_r+0x1c>
 8003a08:	42a9      	cmp	r1, r5
 8003a0a:	d905      	bls.n	8003a18 <_malloc_r+0x28>
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	2600      	movs	r6, #0
 8003a12:	4630      	mov	r0, r6
 8003a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003aec <_malloc_r+0xfc>
 8003a1c:	f000 f868 	bl	8003af0 <__malloc_lock>
 8003a20:	f8d8 3000 	ldr.w	r3, [r8]
 8003a24:	461c      	mov	r4, r3
 8003a26:	bb5c      	cbnz	r4, 8003a80 <_malloc_r+0x90>
 8003a28:	4629      	mov	r1, r5
 8003a2a:	4638      	mov	r0, r7
 8003a2c:	f7ff ffc0 	bl	80039b0 <sbrk_aligned>
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	4604      	mov	r4, r0
 8003a34:	d155      	bne.n	8003ae2 <_malloc_r+0xf2>
 8003a36:	f8d8 4000 	ldr.w	r4, [r8]
 8003a3a:	4626      	mov	r6, r4
 8003a3c:	2e00      	cmp	r6, #0
 8003a3e:	d145      	bne.n	8003acc <_malloc_r+0xdc>
 8003a40:	2c00      	cmp	r4, #0
 8003a42:	d048      	beq.n	8003ad6 <_malloc_r+0xe6>
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	4631      	mov	r1, r6
 8003a48:	4638      	mov	r0, r7
 8003a4a:	eb04 0903 	add.w	r9, r4, r3
 8003a4e:	f000 fb5d 	bl	800410c <_sbrk_r>
 8003a52:	4581      	cmp	r9, r0
 8003a54:	d13f      	bne.n	8003ad6 <_malloc_r+0xe6>
 8003a56:	6821      	ldr	r1, [r4, #0]
 8003a58:	1a6d      	subs	r5, r5, r1
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f7ff ffa7 	bl	80039b0 <sbrk_aligned>
 8003a62:	3001      	adds	r0, #1
 8003a64:	d037      	beq.n	8003ad6 <_malloc_r+0xe6>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	442b      	add	r3, r5
 8003a6a:	6023      	str	r3, [r4, #0]
 8003a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d038      	beq.n	8003ae6 <_malloc_r+0xf6>
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	42a2      	cmp	r2, r4
 8003a78:	d12b      	bne.n	8003ad2 <_malloc_r+0xe2>
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	e00f      	b.n	8003aa0 <_malloc_r+0xb0>
 8003a80:	6822      	ldr	r2, [r4, #0]
 8003a82:	1b52      	subs	r2, r2, r5
 8003a84:	d41f      	bmi.n	8003ac6 <_malloc_r+0xd6>
 8003a86:	2a0b      	cmp	r2, #11
 8003a88:	d917      	bls.n	8003aba <_malloc_r+0xca>
 8003a8a:	1961      	adds	r1, r4, r5
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	6025      	str	r5, [r4, #0]
 8003a90:	bf18      	it	ne
 8003a92:	6059      	strne	r1, [r3, #4]
 8003a94:	6863      	ldr	r3, [r4, #4]
 8003a96:	bf08      	it	eq
 8003a98:	f8c8 1000 	streq.w	r1, [r8]
 8003a9c:	5162      	str	r2, [r4, r5]
 8003a9e:	604b      	str	r3, [r1, #4]
 8003aa0:	4638      	mov	r0, r7
 8003aa2:	f104 060b 	add.w	r6, r4, #11
 8003aa6:	f000 f829 	bl	8003afc <__malloc_unlock>
 8003aaa:	f026 0607 	bic.w	r6, r6, #7
 8003aae:	1d23      	adds	r3, r4, #4
 8003ab0:	1af2      	subs	r2, r6, r3
 8003ab2:	d0ae      	beq.n	8003a12 <_malloc_r+0x22>
 8003ab4:	1b9b      	subs	r3, r3, r6
 8003ab6:	50a3      	str	r3, [r4, r2]
 8003ab8:	e7ab      	b.n	8003a12 <_malloc_r+0x22>
 8003aba:	42a3      	cmp	r3, r4
 8003abc:	6862      	ldr	r2, [r4, #4]
 8003abe:	d1dd      	bne.n	8003a7c <_malloc_r+0x8c>
 8003ac0:	f8c8 2000 	str.w	r2, [r8]
 8003ac4:	e7ec      	b.n	8003aa0 <_malloc_r+0xb0>
 8003ac6:	4623      	mov	r3, r4
 8003ac8:	6864      	ldr	r4, [r4, #4]
 8003aca:	e7ac      	b.n	8003a26 <_malloc_r+0x36>
 8003acc:	4634      	mov	r4, r6
 8003ace:	6876      	ldr	r6, [r6, #4]
 8003ad0:	e7b4      	b.n	8003a3c <_malloc_r+0x4c>
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	e7cc      	b.n	8003a70 <_malloc_r+0x80>
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	4638      	mov	r0, r7
 8003adc:	f000 f80e 	bl	8003afc <__malloc_unlock>
 8003ae0:	e797      	b.n	8003a12 <_malloc_r+0x22>
 8003ae2:	6025      	str	r5, [r4, #0]
 8003ae4:	e7dc      	b.n	8003aa0 <_malloc_r+0xb0>
 8003ae6:	605b      	str	r3, [r3, #4]
 8003ae8:	deff      	udf	#255	; 0xff
 8003aea:	bf00      	nop
 8003aec:	2000027c 	.word	0x2000027c

08003af0 <__malloc_lock>:
 8003af0:	4801      	ldr	r0, [pc, #4]	; (8003af8 <__malloc_lock+0x8>)
 8003af2:	f7ff bf0f 	b.w	8003914 <__retarget_lock_acquire_recursive>
 8003af6:	bf00      	nop
 8003af8:	20000278 	.word	0x20000278

08003afc <__malloc_unlock>:
 8003afc:	4801      	ldr	r0, [pc, #4]	; (8003b04 <__malloc_unlock+0x8>)
 8003afe:	f7ff bf0a 	b.w	8003916 <__retarget_lock_release_recursive>
 8003b02:	bf00      	nop
 8003b04:	20000278 	.word	0x20000278

08003b08 <__ssputs_r>:
 8003b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0c:	688e      	ldr	r6, [r1, #8]
 8003b0e:	461f      	mov	r7, r3
 8003b10:	42be      	cmp	r6, r7
 8003b12:	680b      	ldr	r3, [r1, #0]
 8003b14:	4682      	mov	sl, r0
 8003b16:	460c      	mov	r4, r1
 8003b18:	4690      	mov	r8, r2
 8003b1a:	d82c      	bhi.n	8003b76 <__ssputs_r+0x6e>
 8003b1c:	898a      	ldrh	r2, [r1, #12]
 8003b1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b22:	d026      	beq.n	8003b72 <__ssputs_r+0x6a>
 8003b24:	6965      	ldr	r5, [r4, #20]
 8003b26:	6909      	ldr	r1, [r1, #16]
 8003b28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b2c:	eba3 0901 	sub.w	r9, r3, r1
 8003b30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b34:	1c7b      	adds	r3, r7, #1
 8003b36:	444b      	add	r3, r9
 8003b38:	106d      	asrs	r5, r5, #1
 8003b3a:	429d      	cmp	r5, r3
 8003b3c:	bf38      	it	cc
 8003b3e:	461d      	movcc	r5, r3
 8003b40:	0553      	lsls	r3, r2, #21
 8003b42:	d527      	bpl.n	8003b94 <__ssputs_r+0x8c>
 8003b44:	4629      	mov	r1, r5
 8003b46:	f7ff ff53 	bl	80039f0 <_malloc_r>
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	b360      	cbz	r0, 8003ba8 <__ssputs_r+0xa0>
 8003b4e:	6921      	ldr	r1, [r4, #16]
 8003b50:	464a      	mov	r2, r9
 8003b52:	f000 faeb 	bl	800412c <memcpy>
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b60:	81a3      	strh	r3, [r4, #12]
 8003b62:	6126      	str	r6, [r4, #16]
 8003b64:	6165      	str	r5, [r4, #20]
 8003b66:	444e      	add	r6, r9
 8003b68:	eba5 0509 	sub.w	r5, r5, r9
 8003b6c:	6026      	str	r6, [r4, #0]
 8003b6e:	60a5      	str	r5, [r4, #8]
 8003b70:	463e      	mov	r6, r7
 8003b72:	42be      	cmp	r6, r7
 8003b74:	d900      	bls.n	8003b78 <__ssputs_r+0x70>
 8003b76:	463e      	mov	r6, r7
 8003b78:	6820      	ldr	r0, [r4, #0]
 8003b7a:	4632      	mov	r2, r6
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	f000 faab 	bl	80040d8 <memmove>
 8003b82:	68a3      	ldr	r3, [r4, #8]
 8003b84:	1b9b      	subs	r3, r3, r6
 8003b86:	60a3      	str	r3, [r4, #8]
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	4433      	add	r3, r6
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b94:	462a      	mov	r2, r5
 8003b96:	f000 fad7 	bl	8004148 <_realloc_r>
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d1e0      	bne.n	8003b62 <__ssputs_r+0x5a>
 8003ba0:	6921      	ldr	r1, [r4, #16]
 8003ba2:	4650      	mov	r0, sl
 8003ba4:	f7ff feb8 	bl	8003918 <_free_r>
 8003ba8:	230c      	movs	r3, #12
 8003baa:	f8ca 3000 	str.w	r3, [sl]
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb4:	81a3      	strh	r3, [r4, #12]
 8003bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bba:	e7e9      	b.n	8003b90 <__ssputs_r+0x88>

08003bbc <_svfiprintf_r>:
 8003bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc0:	4698      	mov	r8, r3
 8003bc2:	898b      	ldrh	r3, [r1, #12]
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	b09d      	sub	sp, #116	; 0x74
 8003bc8:	4607      	mov	r7, r0
 8003bca:	460d      	mov	r5, r1
 8003bcc:	4614      	mov	r4, r2
 8003bce:	d50e      	bpl.n	8003bee <_svfiprintf_r+0x32>
 8003bd0:	690b      	ldr	r3, [r1, #16]
 8003bd2:	b963      	cbnz	r3, 8003bee <_svfiprintf_r+0x32>
 8003bd4:	2140      	movs	r1, #64	; 0x40
 8003bd6:	f7ff ff0b 	bl	80039f0 <_malloc_r>
 8003bda:	6028      	str	r0, [r5, #0]
 8003bdc:	6128      	str	r0, [r5, #16]
 8003bde:	b920      	cbnz	r0, 8003bea <_svfiprintf_r+0x2e>
 8003be0:	230c      	movs	r3, #12
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	e0d0      	b.n	8003d8c <_svfiprintf_r+0x1d0>
 8003bea:	2340      	movs	r3, #64	; 0x40
 8003bec:	616b      	str	r3, [r5, #20]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bfc:	2330      	movs	r3, #48	; 0x30
 8003bfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003da4 <_svfiprintf_r+0x1e8>
 8003c02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c06:	f04f 0901 	mov.w	r9, #1
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	469a      	mov	sl, r3
 8003c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c12:	b10a      	cbz	r2, 8003c18 <_svfiprintf_r+0x5c>
 8003c14:	2a25      	cmp	r2, #37	; 0x25
 8003c16:	d1f9      	bne.n	8003c0c <_svfiprintf_r+0x50>
 8003c18:	ebba 0b04 	subs.w	fp, sl, r4
 8003c1c:	d00b      	beq.n	8003c36 <_svfiprintf_r+0x7a>
 8003c1e:	465b      	mov	r3, fp
 8003c20:	4622      	mov	r2, r4
 8003c22:	4629      	mov	r1, r5
 8003c24:	4638      	mov	r0, r7
 8003c26:	f7ff ff6f 	bl	8003b08 <__ssputs_r>
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	f000 80a9 	beq.w	8003d82 <_svfiprintf_r+0x1c6>
 8003c30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c32:	445a      	add	r2, fp
 8003c34:	9209      	str	r2, [sp, #36]	; 0x24
 8003c36:	f89a 3000 	ldrb.w	r3, [sl]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80a1 	beq.w	8003d82 <_svfiprintf_r+0x1c6>
 8003c40:	2300      	movs	r3, #0
 8003c42:	f04f 32ff 	mov.w	r2, #4294967295
 8003c46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c4a:	f10a 0a01 	add.w	sl, sl, #1
 8003c4e:	9304      	str	r3, [sp, #16]
 8003c50:	9307      	str	r3, [sp, #28]
 8003c52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c56:	931a      	str	r3, [sp, #104]	; 0x68
 8003c58:	4654      	mov	r4, sl
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c60:	4850      	ldr	r0, [pc, #320]	; (8003da4 <_svfiprintf_r+0x1e8>)
 8003c62:	f7fc fabd 	bl	80001e0 <memchr>
 8003c66:	9a04      	ldr	r2, [sp, #16]
 8003c68:	b9d8      	cbnz	r0, 8003ca2 <_svfiprintf_r+0xe6>
 8003c6a:	06d0      	lsls	r0, r2, #27
 8003c6c:	bf44      	itt	mi
 8003c6e:	2320      	movmi	r3, #32
 8003c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c74:	0711      	lsls	r1, r2, #28
 8003c76:	bf44      	itt	mi
 8003c78:	232b      	movmi	r3, #43	; 0x2b
 8003c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c82:	2b2a      	cmp	r3, #42	; 0x2a
 8003c84:	d015      	beq.n	8003cb2 <_svfiprintf_r+0xf6>
 8003c86:	9a07      	ldr	r2, [sp, #28]
 8003c88:	4654      	mov	r4, sl
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f04f 0c0a 	mov.w	ip, #10
 8003c90:	4621      	mov	r1, r4
 8003c92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c96:	3b30      	subs	r3, #48	; 0x30
 8003c98:	2b09      	cmp	r3, #9
 8003c9a:	d94d      	bls.n	8003d38 <_svfiprintf_r+0x17c>
 8003c9c:	b1b0      	cbz	r0, 8003ccc <_svfiprintf_r+0x110>
 8003c9e:	9207      	str	r2, [sp, #28]
 8003ca0:	e014      	b.n	8003ccc <_svfiprintf_r+0x110>
 8003ca2:	eba0 0308 	sub.w	r3, r0, r8
 8003ca6:	fa09 f303 	lsl.w	r3, r9, r3
 8003caa:	4313      	orrs	r3, r2
 8003cac:	9304      	str	r3, [sp, #16]
 8003cae:	46a2      	mov	sl, r4
 8003cb0:	e7d2      	b.n	8003c58 <_svfiprintf_r+0x9c>
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	1d19      	adds	r1, r3, #4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	9103      	str	r1, [sp, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bfbb      	ittet	lt
 8003cbe:	425b      	neglt	r3, r3
 8003cc0:	f042 0202 	orrlt.w	r2, r2, #2
 8003cc4:	9307      	strge	r3, [sp, #28]
 8003cc6:	9307      	strlt	r3, [sp, #28]
 8003cc8:	bfb8      	it	lt
 8003cca:	9204      	strlt	r2, [sp, #16]
 8003ccc:	7823      	ldrb	r3, [r4, #0]
 8003cce:	2b2e      	cmp	r3, #46	; 0x2e
 8003cd0:	d10c      	bne.n	8003cec <_svfiprintf_r+0x130>
 8003cd2:	7863      	ldrb	r3, [r4, #1]
 8003cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd6:	d134      	bne.n	8003d42 <_svfiprintf_r+0x186>
 8003cd8:	9b03      	ldr	r3, [sp, #12]
 8003cda:	1d1a      	adds	r2, r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	9203      	str	r2, [sp, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bfb8      	it	lt
 8003ce4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ce8:	3402      	adds	r4, #2
 8003cea:	9305      	str	r3, [sp, #20]
 8003cec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003db4 <_svfiprintf_r+0x1f8>
 8003cf0:	7821      	ldrb	r1, [r4, #0]
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	4650      	mov	r0, sl
 8003cf6:	f7fc fa73 	bl	80001e0 <memchr>
 8003cfa:	b138      	cbz	r0, 8003d0c <_svfiprintf_r+0x150>
 8003cfc:	9b04      	ldr	r3, [sp, #16]
 8003cfe:	eba0 000a 	sub.w	r0, r0, sl
 8003d02:	2240      	movs	r2, #64	; 0x40
 8003d04:	4082      	lsls	r2, r0
 8003d06:	4313      	orrs	r3, r2
 8003d08:	3401      	adds	r4, #1
 8003d0a:	9304      	str	r3, [sp, #16]
 8003d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d10:	4825      	ldr	r0, [pc, #148]	; (8003da8 <_svfiprintf_r+0x1ec>)
 8003d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d16:	2206      	movs	r2, #6
 8003d18:	f7fc fa62 	bl	80001e0 <memchr>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d038      	beq.n	8003d92 <_svfiprintf_r+0x1d6>
 8003d20:	4b22      	ldr	r3, [pc, #136]	; (8003dac <_svfiprintf_r+0x1f0>)
 8003d22:	bb1b      	cbnz	r3, 8003d6c <_svfiprintf_r+0x1b0>
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	3307      	adds	r3, #7
 8003d28:	f023 0307 	bic.w	r3, r3, #7
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	9303      	str	r3, [sp, #12]
 8003d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d32:	4433      	add	r3, r6
 8003d34:	9309      	str	r3, [sp, #36]	; 0x24
 8003d36:	e768      	b.n	8003c0a <_svfiprintf_r+0x4e>
 8003d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	2001      	movs	r0, #1
 8003d40:	e7a6      	b.n	8003c90 <_svfiprintf_r+0xd4>
 8003d42:	2300      	movs	r3, #0
 8003d44:	3401      	adds	r4, #1
 8003d46:	9305      	str	r3, [sp, #20]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	f04f 0c0a 	mov.w	ip, #10
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d54:	3a30      	subs	r2, #48	; 0x30
 8003d56:	2a09      	cmp	r2, #9
 8003d58:	d903      	bls.n	8003d62 <_svfiprintf_r+0x1a6>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0c6      	beq.n	8003cec <_svfiprintf_r+0x130>
 8003d5e:	9105      	str	r1, [sp, #20]
 8003d60:	e7c4      	b.n	8003cec <_svfiprintf_r+0x130>
 8003d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d66:	4604      	mov	r4, r0
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e7f0      	b.n	8003d4e <_svfiprintf_r+0x192>
 8003d6c:	ab03      	add	r3, sp, #12
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	462a      	mov	r2, r5
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <_svfiprintf_r+0x1f4>)
 8003d74:	a904      	add	r1, sp, #16
 8003d76:	4638      	mov	r0, r7
 8003d78:	f3af 8000 	nop.w
 8003d7c:	1c42      	adds	r2, r0, #1
 8003d7e:	4606      	mov	r6, r0
 8003d80:	d1d6      	bne.n	8003d30 <_svfiprintf_r+0x174>
 8003d82:	89ab      	ldrh	r3, [r5, #12]
 8003d84:	065b      	lsls	r3, r3, #25
 8003d86:	f53f af2d 	bmi.w	8003be4 <_svfiprintf_r+0x28>
 8003d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d8c:	b01d      	add	sp, #116	; 0x74
 8003d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d92:	ab03      	add	r3, sp, #12
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	462a      	mov	r2, r5
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <_svfiprintf_r+0x1f4>)
 8003d9a:	a904      	add	r1, sp, #16
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	f000 f879 	bl	8003e94 <_printf_i>
 8003da2:	e7eb      	b.n	8003d7c <_svfiprintf_r+0x1c0>
 8003da4:	08005cac 	.word	0x08005cac
 8003da8:	08005cb6 	.word	0x08005cb6
 8003dac:	00000000 	.word	0x00000000
 8003db0:	08003b09 	.word	0x08003b09
 8003db4:	08005cb2 	.word	0x08005cb2

08003db8 <_printf_common>:
 8003db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	4616      	mov	r6, r2
 8003dbe:	4699      	mov	r9, r3
 8003dc0:	688a      	ldr	r2, [r1, #8]
 8003dc2:	690b      	ldr	r3, [r1, #16]
 8003dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bfb8      	it	lt
 8003dcc:	4613      	movlt	r3, r2
 8003dce:	6033      	str	r3, [r6, #0]
 8003dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dd4:	4607      	mov	r7, r0
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	b10a      	cbz	r2, 8003dde <_printf_common+0x26>
 8003dda:	3301      	adds	r3, #1
 8003ddc:	6033      	str	r3, [r6, #0]
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	0699      	lsls	r1, r3, #26
 8003de2:	bf42      	ittt	mi
 8003de4:	6833      	ldrmi	r3, [r6, #0]
 8003de6:	3302      	addmi	r3, #2
 8003de8:	6033      	strmi	r3, [r6, #0]
 8003dea:	6825      	ldr	r5, [r4, #0]
 8003dec:	f015 0506 	ands.w	r5, r5, #6
 8003df0:	d106      	bne.n	8003e00 <_printf_common+0x48>
 8003df2:	f104 0a19 	add.w	sl, r4, #25
 8003df6:	68e3      	ldr	r3, [r4, #12]
 8003df8:	6832      	ldr	r2, [r6, #0]
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	42ab      	cmp	r3, r5
 8003dfe:	dc26      	bgt.n	8003e4e <_printf_common+0x96>
 8003e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e04:	1e13      	subs	r3, r2, #0
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	bf18      	it	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	0692      	lsls	r2, r2, #26
 8003e0e:	d42b      	bmi.n	8003e68 <_printf_common+0xb0>
 8003e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e14:	4649      	mov	r1, r9
 8003e16:	4638      	mov	r0, r7
 8003e18:	47c0      	blx	r8
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d01e      	beq.n	8003e5c <_printf_common+0xa4>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	6922      	ldr	r2, [r4, #16]
 8003e22:	f003 0306 	and.w	r3, r3, #6
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	bf02      	ittt	eq
 8003e2a:	68e5      	ldreq	r5, [r4, #12]
 8003e2c:	6833      	ldreq	r3, [r6, #0]
 8003e2e:	1aed      	subeq	r5, r5, r3
 8003e30:	68a3      	ldr	r3, [r4, #8]
 8003e32:	bf0c      	ite	eq
 8003e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e38:	2500      	movne	r5, #0
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	bfc4      	itt	gt
 8003e3e:	1a9b      	subgt	r3, r3, r2
 8003e40:	18ed      	addgt	r5, r5, r3
 8003e42:	2600      	movs	r6, #0
 8003e44:	341a      	adds	r4, #26
 8003e46:	42b5      	cmp	r5, r6
 8003e48:	d11a      	bne.n	8003e80 <_printf_common+0xc8>
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	e008      	b.n	8003e60 <_printf_common+0xa8>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4652      	mov	r2, sl
 8003e52:	4649      	mov	r1, r9
 8003e54:	4638      	mov	r0, r7
 8003e56:	47c0      	blx	r8
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d103      	bne.n	8003e64 <_printf_common+0xac>
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e64:	3501      	adds	r5, #1
 8003e66:	e7c6      	b.n	8003df6 <_printf_common+0x3e>
 8003e68:	18e1      	adds	r1, r4, r3
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	2030      	movs	r0, #48	; 0x30
 8003e6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e72:	4422      	add	r2, r4
 8003e74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	e7c7      	b.n	8003e10 <_printf_common+0x58>
 8003e80:	2301      	movs	r3, #1
 8003e82:	4622      	mov	r2, r4
 8003e84:	4649      	mov	r1, r9
 8003e86:	4638      	mov	r0, r7
 8003e88:	47c0      	blx	r8
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d0e6      	beq.n	8003e5c <_printf_common+0xa4>
 8003e8e:	3601      	adds	r6, #1
 8003e90:	e7d9      	b.n	8003e46 <_printf_common+0x8e>
	...

08003e94 <_printf_i>:
 8003e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	7e0f      	ldrb	r7, [r1, #24]
 8003e9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e9c:	2f78      	cmp	r7, #120	; 0x78
 8003e9e:	4691      	mov	r9, r2
 8003ea0:	4680      	mov	r8, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	469a      	mov	sl, r3
 8003ea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003eaa:	d807      	bhi.n	8003ebc <_printf_i+0x28>
 8003eac:	2f62      	cmp	r7, #98	; 0x62
 8003eae:	d80a      	bhi.n	8003ec6 <_printf_i+0x32>
 8003eb0:	2f00      	cmp	r7, #0
 8003eb2:	f000 80d4 	beq.w	800405e <_printf_i+0x1ca>
 8003eb6:	2f58      	cmp	r7, #88	; 0x58
 8003eb8:	f000 80c0 	beq.w	800403c <_printf_i+0x1a8>
 8003ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ec4:	e03a      	b.n	8003f3c <_printf_i+0xa8>
 8003ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eca:	2b15      	cmp	r3, #21
 8003ecc:	d8f6      	bhi.n	8003ebc <_printf_i+0x28>
 8003ece:	a101      	add	r1, pc, #4	; (adr r1, 8003ed4 <_printf_i+0x40>)
 8003ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ed4:	08003f2d 	.word	0x08003f2d
 8003ed8:	08003f41 	.word	0x08003f41
 8003edc:	08003ebd 	.word	0x08003ebd
 8003ee0:	08003ebd 	.word	0x08003ebd
 8003ee4:	08003ebd 	.word	0x08003ebd
 8003ee8:	08003ebd 	.word	0x08003ebd
 8003eec:	08003f41 	.word	0x08003f41
 8003ef0:	08003ebd 	.word	0x08003ebd
 8003ef4:	08003ebd 	.word	0x08003ebd
 8003ef8:	08003ebd 	.word	0x08003ebd
 8003efc:	08003ebd 	.word	0x08003ebd
 8003f00:	08004045 	.word	0x08004045
 8003f04:	08003f6d 	.word	0x08003f6d
 8003f08:	08003fff 	.word	0x08003fff
 8003f0c:	08003ebd 	.word	0x08003ebd
 8003f10:	08003ebd 	.word	0x08003ebd
 8003f14:	08004067 	.word	0x08004067
 8003f18:	08003ebd 	.word	0x08003ebd
 8003f1c:	08003f6d 	.word	0x08003f6d
 8003f20:	08003ebd 	.word	0x08003ebd
 8003f24:	08003ebd 	.word	0x08003ebd
 8003f28:	08004007 	.word	0x08004007
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	1d1a      	adds	r2, r3, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	602a      	str	r2, [r5, #0]
 8003f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e09f      	b.n	8004080 <_printf_i+0x1ec>
 8003f40:	6820      	ldr	r0, [r4, #0]
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	0607      	lsls	r7, r0, #24
 8003f46:	f103 0104 	add.w	r1, r3, #4
 8003f4a:	6029      	str	r1, [r5, #0]
 8003f4c:	d501      	bpl.n	8003f52 <_printf_i+0xbe>
 8003f4e:	681e      	ldr	r6, [r3, #0]
 8003f50:	e003      	b.n	8003f5a <_printf_i+0xc6>
 8003f52:	0646      	lsls	r6, r0, #25
 8003f54:	d5fb      	bpl.n	8003f4e <_printf_i+0xba>
 8003f56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f5a:	2e00      	cmp	r6, #0
 8003f5c:	da03      	bge.n	8003f66 <_printf_i+0xd2>
 8003f5e:	232d      	movs	r3, #45	; 0x2d
 8003f60:	4276      	negs	r6, r6
 8003f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f66:	485a      	ldr	r0, [pc, #360]	; (80040d0 <_printf_i+0x23c>)
 8003f68:	230a      	movs	r3, #10
 8003f6a:	e012      	b.n	8003f92 <_printf_i+0xfe>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	6820      	ldr	r0, [r4, #0]
 8003f70:	1d19      	adds	r1, r3, #4
 8003f72:	6029      	str	r1, [r5, #0]
 8003f74:	0605      	lsls	r5, r0, #24
 8003f76:	d501      	bpl.n	8003f7c <_printf_i+0xe8>
 8003f78:	681e      	ldr	r6, [r3, #0]
 8003f7a:	e002      	b.n	8003f82 <_printf_i+0xee>
 8003f7c:	0641      	lsls	r1, r0, #25
 8003f7e:	d5fb      	bpl.n	8003f78 <_printf_i+0xe4>
 8003f80:	881e      	ldrh	r6, [r3, #0]
 8003f82:	4853      	ldr	r0, [pc, #332]	; (80040d0 <_printf_i+0x23c>)
 8003f84:	2f6f      	cmp	r7, #111	; 0x6f
 8003f86:	bf0c      	ite	eq
 8003f88:	2308      	moveq	r3, #8
 8003f8a:	230a      	movne	r3, #10
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f92:	6865      	ldr	r5, [r4, #4]
 8003f94:	60a5      	str	r5, [r4, #8]
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	bfa2      	ittt	ge
 8003f9a:	6821      	ldrge	r1, [r4, #0]
 8003f9c:	f021 0104 	bicge.w	r1, r1, #4
 8003fa0:	6021      	strge	r1, [r4, #0]
 8003fa2:	b90e      	cbnz	r6, 8003fa8 <_printf_i+0x114>
 8003fa4:	2d00      	cmp	r5, #0
 8003fa6:	d04b      	beq.n	8004040 <_printf_i+0x1ac>
 8003fa8:	4615      	mov	r5, r2
 8003faa:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fae:	fb03 6711 	mls	r7, r3, r1, r6
 8003fb2:	5dc7      	ldrb	r7, [r0, r7]
 8003fb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fb8:	4637      	mov	r7, r6
 8003fba:	42bb      	cmp	r3, r7
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	d9f4      	bls.n	8003faa <_printf_i+0x116>
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d10b      	bne.n	8003fdc <_printf_i+0x148>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	07de      	lsls	r6, r3, #31
 8003fc8:	d508      	bpl.n	8003fdc <_printf_i+0x148>
 8003fca:	6923      	ldr	r3, [r4, #16]
 8003fcc:	6861      	ldr	r1, [r4, #4]
 8003fce:	4299      	cmp	r1, r3
 8003fd0:	bfde      	ittt	le
 8003fd2:	2330      	movle	r3, #48	; 0x30
 8003fd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fdc:	1b52      	subs	r2, r2, r5
 8003fde:	6122      	str	r2, [r4, #16]
 8003fe0:	f8cd a000 	str.w	sl, [sp]
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	aa03      	add	r2, sp, #12
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4640      	mov	r0, r8
 8003fec:	f7ff fee4 	bl	8003db8 <_printf_common>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d14a      	bne.n	800408a <_printf_i+0x1f6>
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	b004      	add	sp, #16
 8003ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	f043 0320 	orr.w	r3, r3, #32
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	4833      	ldr	r0, [pc, #204]	; (80040d4 <_printf_i+0x240>)
 8004008:	2778      	movs	r7, #120	; 0x78
 800400a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	6829      	ldr	r1, [r5, #0]
 8004012:	061f      	lsls	r7, r3, #24
 8004014:	f851 6b04 	ldr.w	r6, [r1], #4
 8004018:	d402      	bmi.n	8004020 <_printf_i+0x18c>
 800401a:	065f      	lsls	r7, r3, #25
 800401c:	bf48      	it	mi
 800401e:	b2b6      	uxthmi	r6, r6
 8004020:	07df      	lsls	r7, r3, #31
 8004022:	bf48      	it	mi
 8004024:	f043 0320 	orrmi.w	r3, r3, #32
 8004028:	6029      	str	r1, [r5, #0]
 800402a:	bf48      	it	mi
 800402c:	6023      	strmi	r3, [r4, #0]
 800402e:	b91e      	cbnz	r6, 8004038 <_printf_i+0x1a4>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	f023 0320 	bic.w	r3, r3, #32
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	2310      	movs	r3, #16
 800403a:	e7a7      	b.n	8003f8c <_printf_i+0xf8>
 800403c:	4824      	ldr	r0, [pc, #144]	; (80040d0 <_printf_i+0x23c>)
 800403e:	e7e4      	b.n	800400a <_printf_i+0x176>
 8004040:	4615      	mov	r5, r2
 8004042:	e7bd      	b.n	8003fc0 <_printf_i+0x12c>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	6826      	ldr	r6, [r4, #0]
 8004048:	6961      	ldr	r1, [r4, #20]
 800404a:	1d18      	adds	r0, r3, #4
 800404c:	6028      	str	r0, [r5, #0]
 800404e:	0635      	lsls	r5, r6, #24
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	d501      	bpl.n	8004058 <_printf_i+0x1c4>
 8004054:	6019      	str	r1, [r3, #0]
 8004056:	e002      	b.n	800405e <_printf_i+0x1ca>
 8004058:	0670      	lsls	r0, r6, #25
 800405a:	d5fb      	bpl.n	8004054 <_printf_i+0x1c0>
 800405c:	8019      	strh	r1, [r3, #0]
 800405e:	2300      	movs	r3, #0
 8004060:	6123      	str	r3, [r4, #16]
 8004062:	4615      	mov	r5, r2
 8004064:	e7bc      	b.n	8003fe0 <_printf_i+0x14c>
 8004066:	682b      	ldr	r3, [r5, #0]
 8004068:	1d1a      	adds	r2, r3, #4
 800406a:	602a      	str	r2, [r5, #0]
 800406c:	681d      	ldr	r5, [r3, #0]
 800406e:	6862      	ldr	r2, [r4, #4]
 8004070:	2100      	movs	r1, #0
 8004072:	4628      	mov	r0, r5
 8004074:	f7fc f8b4 	bl	80001e0 <memchr>
 8004078:	b108      	cbz	r0, 800407e <_printf_i+0x1ea>
 800407a:	1b40      	subs	r0, r0, r5
 800407c:	6060      	str	r0, [r4, #4]
 800407e:	6863      	ldr	r3, [r4, #4]
 8004080:	6123      	str	r3, [r4, #16]
 8004082:	2300      	movs	r3, #0
 8004084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004088:	e7aa      	b.n	8003fe0 <_printf_i+0x14c>
 800408a:	6923      	ldr	r3, [r4, #16]
 800408c:	462a      	mov	r2, r5
 800408e:	4649      	mov	r1, r9
 8004090:	4640      	mov	r0, r8
 8004092:	47d0      	blx	sl
 8004094:	3001      	adds	r0, #1
 8004096:	d0ad      	beq.n	8003ff4 <_printf_i+0x160>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	079b      	lsls	r3, r3, #30
 800409c:	d413      	bmi.n	80040c6 <_printf_i+0x232>
 800409e:	68e0      	ldr	r0, [r4, #12]
 80040a0:	9b03      	ldr	r3, [sp, #12]
 80040a2:	4298      	cmp	r0, r3
 80040a4:	bfb8      	it	lt
 80040a6:	4618      	movlt	r0, r3
 80040a8:	e7a6      	b.n	8003ff8 <_printf_i+0x164>
 80040aa:	2301      	movs	r3, #1
 80040ac:	4632      	mov	r2, r6
 80040ae:	4649      	mov	r1, r9
 80040b0:	4640      	mov	r0, r8
 80040b2:	47d0      	blx	sl
 80040b4:	3001      	adds	r0, #1
 80040b6:	d09d      	beq.n	8003ff4 <_printf_i+0x160>
 80040b8:	3501      	adds	r5, #1
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	9903      	ldr	r1, [sp, #12]
 80040be:	1a5b      	subs	r3, r3, r1
 80040c0:	42ab      	cmp	r3, r5
 80040c2:	dcf2      	bgt.n	80040aa <_printf_i+0x216>
 80040c4:	e7eb      	b.n	800409e <_printf_i+0x20a>
 80040c6:	2500      	movs	r5, #0
 80040c8:	f104 0619 	add.w	r6, r4, #25
 80040cc:	e7f5      	b.n	80040ba <_printf_i+0x226>
 80040ce:	bf00      	nop
 80040d0:	08005cbd 	.word	0x08005cbd
 80040d4:	08005cce 	.word	0x08005cce

080040d8 <memmove>:
 80040d8:	4288      	cmp	r0, r1
 80040da:	b510      	push	{r4, lr}
 80040dc:	eb01 0402 	add.w	r4, r1, r2
 80040e0:	d902      	bls.n	80040e8 <memmove+0x10>
 80040e2:	4284      	cmp	r4, r0
 80040e4:	4623      	mov	r3, r4
 80040e6:	d807      	bhi.n	80040f8 <memmove+0x20>
 80040e8:	1e43      	subs	r3, r0, #1
 80040ea:	42a1      	cmp	r1, r4
 80040ec:	d008      	beq.n	8004100 <memmove+0x28>
 80040ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040f6:	e7f8      	b.n	80040ea <memmove+0x12>
 80040f8:	4402      	add	r2, r0
 80040fa:	4601      	mov	r1, r0
 80040fc:	428a      	cmp	r2, r1
 80040fe:	d100      	bne.n	8004102 <memmove+0x2a>
 8004100:	bd10      	pop	{r4, pc}
 8004102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800410a:	e7f7      	b.n	80040fc <memmove+0x24>

0800410c <_sbrk_r>:
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	4d06      	ldr	r5, [pc, #24]	; (8004128 <_sbrk_r+0x1c>)
 8004110:	2300      	movs	r3, #0
 8004112:	4604      	mov	r4, r0
 8004114:	4608      	mov	r0, r1
 8004116:	602b      	str	r3, [r5, #0]
 8004118:	f7fd fc42 	bl	80019a0 <_sbrk>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d102      	bne.n	8004126 <_sbrk_r+0x1a>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	b103      	cbz	r3, 8004126 <_sbrk_r+0x1a>
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	bd38      	pop	{r3, r4, r5, pc}
 8004128:	20000274 	.word	0x20000274

0800412c <memcpy>:
 800412c:	440a      	add	r2, r1
 800412e:	4291      	cmp	r1, r2
 8004130:	f100 33ff 	add.w	r3, r0, #4294967295
 8004134:	d100      	bne.n	8004138 <memcpy+0xc>
 8004136:	4770      	bx	lr
 8004138:	b510      	push	{r4, lr}
 800413a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800413e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004142:	4291      	cmp	r1, r2
 8004144:	d1f9      	bne.n	800413a <memcpy+0xe>
 8004146:	bd10      	pop	{r4, pc}

08004148 <_realloc_r>:
 8004148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414c:	4680      	mov	r8, r0
 800414e:	4614      	mov	r4, r2
 8004150:	460e      	mov	r6, r1
 8004152:	b921      	cbnz	r1, 800415e <_realloc_r+0x16>
 8004154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004158:	4611      	mov	r1, r2
 800415a:	f7ff bc49 	b.w	80039f0 <_malloc_r>
 800415e:	b92a      	cbnz	r2, 800416c <_realloc_r+0x24>
 8004160:	f7ff fbda 	bl	8003918 <_free_r>
 8004164:	4625      	mov	r5, r4
 8004166:	4628      	mov	r0, r5
 8004168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800416c:	f000 f81b 	bl	80041a6 <_malloc_usable_size_r>
 8004170:	4284      	cmp	r4, r0
 8004172:	4607      	mov	r7, r0
 8004174:	d802      	bhi.n	800417c <_realloc_r+0x34>
 8004176:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800417a:	d812      	bhi.n	80041a2 <_realloc_r+0x5a>
 800417c:	4621      	mov	r1, r4
 800417e:	4640      	mov	r0, r8
 8004180:	f7ff fc36 	bl	80039f0 <_malloc_r>
 8004184:	4605      	mov	r5, r0
 8004186:	2800      	cmp	r0, #0
 8004188:	d0ed      	beq.n	8004166 <_realloc_r+0x1e>
 800418a:	42bc      	cmp	r4, r7
 800418c:	4622      	mov	r2, r4
 800418e:	4631      	mov	r1, r6
 8004190:	bf28      	it	cs
 8004192:	463a      	movcs	r2, r7
 8004194:	f7ff ffca 	bl	800412c <memcpy>
 8004198:	4631      	mov	r1, r6
 800419a:	4640      	mov	r0, r8
 800419c:	f7ff fbbc 	bl	8003918 <_free_r>
 80041a0:	e7e1      	b.n	8004166 <_realloc_r+0x1e>
 80041a2:	4635      	mov	r5, r6
 80041a4:	e7df      	b.n	8004166 <_realloc_r+0x1e>

080041a6 <_malloc_usable_size_r>:
 80041a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041aa:	1f18      	subs	r0, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bfbc      	itt	lt
 80041b0:	580b      	ldrlt	r3, [r1, r0]
 80041b2:	18c0      	addlt	r0, r0, r3
 80041b4:	4770      	bx	lr
	...

080041b8 <_init>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	bf00      	nop
 80041bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041be:	bc08      	pop	{r3}
 80041c0:	469e      	mov	lr, r3
 80041c2:	4770      	bx	lr

080041c4 <_fini>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr
